<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TOMWrapper</name>
    </assembly>
    <members>
        <member name="M:TabularEditor.TOMWrapper.Utils.TabularDeployer.Deploy(Microsoft.AnalysisServices.Tabular.Database,System.String,System.String,TabularEditor.TOMWrapper.Utils.DeploymentOptions,System.Threading.CancellationToken)">
            <summary>
            Deploys the specified database to the specified target server and database ID, using the specified options.
            Returns a list of DAX errors (if any) on objects inside the database, in case the deployment was successful.
            </summary>
            <param name="db"></param>
            <param name="targetConnectionString"></param>
            <param name="targetDatabaseName"></param>
            <param name="options"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.TabularDeployer.TransformCreateOrReplaceTmsl(Newtonsoft.Json.Linq.JObject,Microsoft.AnalysisServices.Tabular.Database,Microsoft.AnalysisServices.Tabular.Database,TabularEditor.TOMWrapper.Utils.DeploymentOptions)">
            <summary>
            This method transforms a JObject representing a CreateOrReplace TMSL script, so that the script points
            to the correct database to be overwritten, and that the correct ID and Name properties are set. In
            addition, the method will replace any Roles, RoleMembers, Data Sources and Partitions in the TMSL with
            the corresponding TMSL from the specified orgDb, depending on the provided DeploymentOptions.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.CredentialPromptEventArgs.PromptTitle">
            <summary>
            The title to display above the prompt
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.CredentialPromptEventArgs.AuthenticationKind">
            <summary>
            Gets or sets the authentication kind.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.CredentialPromptEventArgs.DataSourceName">
            <summary>
            Gets or sets the name of the data source.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.CredentialPromptEventArgs.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.CredentialPromptEventArgs.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.CredentialPromptEventArgs.PrivacySetting">
            <summary>
            Gets or sets the privacy level.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.CredentialPromptEventArgs.ConnectionStringCredentials">
            <summary>
            If the credentials are embedded as part of the connection string, this flag is true
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.CredentialPromptEventArgs.ExistsInDestination">
            <summary>
            Indicates whether the user is providing credentials for a data source that already exists in the destination model
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.CredentialPromptEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating if the user cancelled the deployment.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.BlobKeyPromptEventArgs.AuthenticationKind">
            <summary>
            Gets or sets the authentication kind.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.BlobKeyPromptEventArgs.DataSourceName">
            <summary>
            Gets or sets the name of the data source.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.BlobKeyPromptEventArgs.AccountKey">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.BlobKeyPromptEventArgs.PrivacySetting">
            <summary>
            Gets or sets the privacy level.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.BlobKeyPromptEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating if the user cancelled the deployment.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.BlobKeyPromptEventArgs.ExistsInDestination">
            <summary>
            Indicates whether the user is providing credentials for a data source that already exists in the destination model
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.DeploymentOptions.Default">
            <summary>
            Default deployment. Does not overwrite connections, partitions or role members.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.DeploymentOptions.Full">
            <summary>
            Full deployment.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.DeploymentOptions.StructureOnly">
            <summary>
            StructureOnly deployment. Does not overwrite roles or role members.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.TabularDeployerHelpers.FixCalcGroupMetadata(Newtonsoft.Json.Linq.JObject,Microsoft.AnalysisServices.Tabular.Database)">
            <summary>
            This takes care of an issue in AS where calc group columns need to appear in a specific order
            See issue: https://github.com/otykier/TabularEditor/issues/411
            </summary>
            <param name="tmslJObj"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.TabularDeployerHelpers.PropEquals(Newtonsoft.Json.Linq.JToken,System.String,System.String)">
            <summary>
            Returns true if the given JObject contains a string property with the specified name and value.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.TabularDeployerHelpers.TransformCreateTmsl(Newtonsoft.Json.Linq.JObject,System.String,TabularEditor.TOMWrapper.Utils.DeploymentOptions)">
            <summary>
            This method transforms a JObject representing a Create TMSL script, so that the database is deployed
            using the proper ID and Name values. In addition, of the DeploymentOptions specify that roles should
            not be deployed, they are stripped from the TMSL script.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.DaxDependencyHelper.Tokenize(TabularEditor.TOMWrapper.IDaxDependantObject)">
            <summary>
            Return a list of tokens representing the DAX expression on the current object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.DaxDependencyHelper.Tokenize(TabularEditor.TOMWrapper.IDaxDependantObject,TabularEditor.TOMWrapper.ExpressionProperty)">
            <summary>
            Return a list of tokens representing the specified DAX property on the current object.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Utils.DependsOnList">
            <summary>
            A DependsOnList holds a dictionary of all objects that a specific opject depends on. Each entry contains
            a list of ObjectReferences specifying the details of how the object is referenced.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.DependsOnList.Deep">
            <summary>
            Returns all objects used by the current object (directly or indirectly through other objects).
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.ReferencedByList.Deep">
            <summary>
            Returns all objects that reference the current object (directly or indirectly through other objects).
            </summary>
            <returns></returns>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Utils.ReferencedByList.AnyVisible">
            <summary>
            Iterates the entire dependency tree and determines if any objects referencing the current object
            (directly or indirectly through other objects) are visible. This may be used, for example, to
            create a Best Practice Rule that allows you to detect objects that can safely be removed since
            they do not have any references.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Utils.Scripter">
            <summary>
            Various methods for scripting TOM objects into TMSL
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.Scripter.ScriptCreateOrReplace(TabularEditor.TOMWrapper.Database)">
            <summary>
            Scripts the entire database as a CreateOrReplace
            </summary>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.Scripter.ScriptAlter(TabularEditor.TOMWrapper.TabularNamedObject)">
            <summary>
            Scripts an Alter TMSL
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.Scripter.ScriptCreate(TabularEditor.TOMWrapper.TabularNamedObject)">
            <summary>
            Scripts a Create TMSL
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.Scripter.ScriptDelete(TabularEditor.TOMWrapper.TabularNamedObject)">
            <summary>
            Scripts a Delete TMSL
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.Scripter.ScriptMergePartitions(System.Collections.Generic.IList{TabularEditor.TOMWrapper.Partition})">
            <summary>
            Scripts a Merge Partition TMSL
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.Scripter.ScriptCreateOrReplace(TabularEditor.TOMWrapper.TabularNamedObject)">
            <summary>
            Scripts the object as a CreateOrReplace TMSL
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.Scripter.ScriptTranslations(TabularEditor.TOMWrapper.Model,System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Culture})">
            <summary>
            Scripts the translation
            </summary>
            <param name="model"></param>
            <param name="translations"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.Scripter.ScriptRefresh(TabularEditor.TOMWrapper.TabularNamedObject,TabularEditor.TOMWrapper.RefreshType)">
            <summary>
            Generates a Refresh TMSL script for the specified object
            </summary>
            <param name="obj"></param>
            <param name="refreshType"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.Scripter.ScriptRefresh(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.TabularNamedObject},TabularEditor.TOMWrapper.RefreshType)">
            <summary>
            Generates a Refresh TMSL script for the specified objects
            </summary>
            <param name="objects"></param>
            <param name="refreshType"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Utils.TabularTreeIterator.GetChildren(TabularEditor.TOMWrapper.ITabularObjectContainer,TabularEditor.TOMWrapper.LogicalTreeOptions,System.Func{TabularEditor.TOMWrapper.ITabularNamedObject,System.Boolean},TabularEditor.TOMWrapper.FolderCache)">
            <summary>
            This method encapsulates the logic of how the tree representation of the tabular model should be structured
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernance">
            <summary>
            Contains methods that governs the rules when editing Power BI data models (such as
            when connected to a Power BI Desktop instance, or when a .pbit file has been loaded).
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.PowerBI.PowerBiTemplate">
            <summary>
            Represents a Power BI Template (.pbit) file. Constructor loads the file into memory. Provides properties for
            getting and setting the data model json, as well as saving the content back to a .pbit file.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularModelHandlerSettings.SemanticAnalysisEnabled">
            <summary>
            When enabled, Tabular Editor uses the DAX Semantic Analyzer to infer static information (syntax errors, data types, calculated table columns).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularModelHandlerSettings.UsePowerQueryPartitionsByDefault">
            <summary>
            Set to true to always add a PowerQuery (M) partition by default to newly created tables
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularModelHandlerSettings.ChangeDetectionLocalServers">
            <summary>
            Specifies whether an AS trace should be started to monitor the server for changes
            made by other applications.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularModelHandlerSettings.AutoFixup">
            <summary>
            Specifies whether object name changes (tables, column, measures) should result in 
            automatic DAX expression updates to reflect the changed names. When set to true,
            all expressions in the model are parsed, to build a dependency tree.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularModelHandlerSettings.PBIFeaturesOnly">
            <summary>
            If this is set to TRUE, only features supported by Power BI may be browsed/edited
            through the TOMWrapper. This is useful for example when a .pbit file has been loaded,
            or when connected to a Power BI Desktop instance.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SemanticEngineFeatureOverridesExtension.MinimumASVersionMultiColumnPredicate">
            <summary>
            April 2021 release of Power BI Desktop introduces multi-column search predicates in CALCULATE/CALCULATETABLE filter expressions
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SemanticEngineFeatureOverridesExtension.MinimumASVersionDirectionalCrossfilter">
            <summary>
            April 2021 release of Power BI Desktop introduces directional cross filters
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SemanticEngineFeatureOverridesExtension.MinimumASVersionDateLiterals">
            <summary>
            June 2021 release of Power BI Desktop introduces date literals (dt"YYYY-MM-DD", etc.)
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SemanticEngineFeatureOverridesExtension.MinimumASVersionCalculateShortcutMeasuresAndAggFunctions">
            <summary>
            June 2021 release of Power BI Desktop introduces shortcut expressions for CALCULATE/CALCULATETABLE that allows the use of Measures or aggregate functions in boolean expressions
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.ApplyChanges">
            <summary>
            Call this when the UpdateLocks reach 0 to apply all cached changes
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeColumnNameChange(TabularEditor.TOMWrapper.Column,System.String)">
            <summary>
            When the name of a column is changed, DAX formulas referencing the column has to be updated.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeTableNameChange(TabularEditor.TOMWrapper.Table,System.String)">
            <summary>
            When the name of a table is changed, DAX formulas referencing the ´table has to be updated.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeMeasureNameChange(TabularEditor.TOMWrapper.Measure,System.String)">
            <summary>
            When the name of a measure is changed, DAX formulas referencing the measure has to be updated.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeAddMeasure(TabularEditor.TOMWrapper.Measure)">
            <summary>
            When a measure is added, previously invalid expressions might become valid.
            </summary>
            <param name="measure"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeRemoveMeasure(TabularEditor.TOMWrapper.Measure)">
            <summary>
            When a measure is deleted, expressions referencing that measure will become invalid
            </summary>
            <param name="measure"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeColumnDataTypeChange(TabularEditor.TOMWrapper.Column,TabularEditor.TOMWrapper.DataType)">
            <summary>
            Changing the data type of a column (DataColumn or CalculatedColumn / CalculatedTableColumn with InferDataType = false), can cause cascades.
            </summary>
            <param name="column"></param>
            <param name="newDataType"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeMeasureExpressionChange(TabularEditor.TOMWrapper.Measure)">
            <summary>
            When the expression of a measure is changed, the resulting data type of the measure might change, potentially causing cascasdes.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeRlsFilterExpressionChange(TabularEditor.TOMWrapper.TablePermission)">
            <summary>
            When the expression of a measure is changed, the resulting data type of the measure might change, potentially causing cascasdes.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeKpiExpressionChange(TabularEditor.TOMWrapper.KPI,Dax.Analyzer.KpiProperty)">
            <summary>
            When the expression of a KPI is changed, the resulting data type of the KPI might change, potentially causing cascasdes.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeCalculatedColumnExpressionChange(TabularEditor.TOMWrapper.CalculatedColumn)">
            <summary>
            When the expression of a Calculated Column is changed, the resulting data type of the column might change, potentially causing cascasdes.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeCalculatedTableExpressionChange(TabularEditor.TOMWrapper.CalculatedTable)">
            <summary>
            When the expression of a Calculated Table is changed, the resulting columns and data types might change, potentially causing cascades.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeAddColumn(TabularEditor.TOMWrapper.Column,TabularEditor.TOMWrapper.Table)">
            <summary>
            Adding a column to a table can cause cascades
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Semantics.SemanticAnalysisCascader.CascadeRemoveColumn(TabularEditor.TOMWrapper.Column,TabularEditor.TOMWrapper.Table)">
            <summary>
            Removing a column from a table can cause cascades
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.AlternateOf">
            <summary>
            Represents a AlternativeSource object. It is a child of either a Table or a Column object.
            </summary><remarks>This metadata object is only supported when the compatibility level of the database is at 1460 or above.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.Delete">
            <summary>
            Delete the AlternateOf
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.AlternateOf.Annotations">
            <summary>The collection of Annotations on the current Alternate Of.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Alternate Of.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Alternate Of.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.AlternateOf.Summarization">
            <summary>
            A value indicating the summarization type used by this alternative sources' column. The possible values are GroupBy (0), Sum (1), Count (2), Min (3), Max (4).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.AlternateOf.Column">
            <summary>
            ID of the owning/parent column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.AlternateOf.BaseColumn">
            <summary>
            A reference ID to the referenced source column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.AlternateOf.BaseTable">
            <summary>
            A reference ID to the referenced source table. You may either define BaseTable or BaseColumn, but not both.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AlternateOf.#ctor(Microsoft.AnalysisServices.Tabular.AlternateOf,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AnnotationHelper.ClearTabularEditorAnnotations(TabularEditor.TOMWrapper.IInternalAnnotationObject,System.Boolean)">
            <summary>
            Removes all annotations from the model, that are used by Tabular Editor to serialize metadata in a way different from the TOM. For example,
            to store object translations as annotations on the object instead of elsewhere in the TOM tree. All these annotations can be recreated from
            the TOM.
            </summary>
            <param name="obj"></param>
            <param name="includeChildren"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AnnotationHelper.SavePerspectives(TabularEditor.TOMWrapper.IInternalTabularPerspectiveObject,System.Boolean)">
            <summary>
            Stores all perspective membership information on the current instance of an ITabularPerspectiveObject
            as annotations on the object. Perspective membership can later be retrieved using the LoadPerspectives() extension method.
            </summary>
            <param name="obj"></param>
            <param name="includeChildren"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AnnotationHelper.LoadPerspectives(TabularEditor.TOMWrapper.IInternalTabularPerspectiveObject,System.Boolean)">
            <summary>
            Reads any perspective membership information stored in the annotations of the current instance of an ITabularPerspectiveObject
            and applies them to the model perspectives.
            </summary>
            <param name="obj"></param>
            <param name="includeChildren"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AnnotationHelper.SaveRLS(TabularEditor.TOMWrapper.Table)">
            <summary>
            Stores all RLS information on the current table as annotations.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AnnotationHelper.SaveOLS(TabularEditor.TOMWrapper.Table,System.Boolean)">
            <summary>
            Stores all OLS information on the current table as annotations.
            </summary>
            <param name="obj"></param>
            <param name="includeChildren"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.AnnotationHelper.SaveOLS(TabularEditor.TOMWrapper.Column)">
            <summary>
            Stores all OLS information on the current column as annotations.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ContentType">
            <summary>
            The type of the content of a string. E.g. XML or JSON.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1465 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ContentType.Xml">
            <summary>
            XML content.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ContentType.Json">
            <summary>
            JSON content.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ExpressionKind">
            <summary>
            Indicates the dialect of the query expression.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ExpressionKind.M">
            <summary>
            The expression is based on the M dialect.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.DataSourceType">
            <summary>
            The type of DataSource. Currently, the only possible value is Provider.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataSourceType.Provider">
            <summary>
            A data source having a data provider and connection string.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataSourceType.Structured">
            <summary>
            For internal use only.
            </summary><remarks>This value is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="T:TabularEditor.TOMWrapper.PartitionSourceType">
            <summary>
            An enumeration of possible values for a partition source.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PartitionSourceType.Query">
            <summary>
            The data in this partition is retrieved by executing a query against a DataSource.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PartitionSourceType.Calculated">
            <summary>
            The data in this partition is populated by executing a calculated expression.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PartitionSourceType.None">
            <summary>
            The source is undefined. Data can come from pushed data or from out of line bindings that pull in data from an explicitly specified data source.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PartitionSourceType.M">
            <summary>
            The partition uses an M expression to retrieve the data.
            </summary><remarks>This value is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PartitionSourceType.Entity">
            <summary>
            The data in this partition is obtained by querying the named entity from the underlying DataSource/Provider.
            </summary><remarks>This value is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PartitionSourceType.PolicyRange">
            <summary>
            The partition uses an M expression to retrieve the data. The partition ranges are auto created based on RefreshPolicy.
            </summary><remarks>This value is only supported when the compatibility level of the database is at 1450 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PartitionSourceType.CalculationGroup">
            <summary>
            The partition uses CalculationGroup as a source.
            </summary><remarks>This value is only supported when the compatibility level of the database is at 1470 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PartitionSourceType.Inferred">
            <summary>
            The data in this partition is populated by executing a query generated by the system.
            </summary><remarks>This value is only supported when the compatibility level of the database is at 1563 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PartitionSourceType.Parquet">
            <summary>
            The data in this partition is populated from parquet file.
            </summary><remarks>This value is only supported when the compatibility level of the database is at Internal or above.</remarks>
        </member>
        <member name="T:TabularEditor.TOMWrapper.DataType">
            <summary>
            Describes the type of data contained in the column.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.Automatic">
            <summary>
            Internal only.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.String">
            <summary>
            Column or measure contains string data values.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.Int64">
            <summary>
            Column or measure contains integers.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.Double">
            <summary>
            Column or measure contains double-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.DateTime">
            <summary>
            Column or measure contains date and time data
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.Decimal">
            <summary>
            Column or measure contains decimal data values.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.Boolean">
            <summary>
            Column or measure contains boolean data values.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.Binary">
            <summary>
            Column or measure contains binary data.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.Unknown">
            <summary>
            Initial value of a newly created column, replaced with an actual value after saving a Column to the Server.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataType.Variant">
            <summary>
            A measure with varying data type.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ObjectState">
            <summary>
            An enumeration of possible values for object state.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ObjectState.Ready">
            <summary>
            Object is refreshed, contains up-to-date data, and is queryable.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ObjectState.NoData">
            <summary>
            Object is queryable but contains no data. Refresh it to bring in data. Applies to non-calculated objects, such as DataColumns, partitions, and Tables.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ObjectState.CalculationNeeded">
            <summary>
            Object is not queryable and contains no data. It needs to be refreshed to become functional. Applies only to calculated objects, such as calculated columns, hierarchies, and calculated tables.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ObjectState.SemanticError">
            <summary>
            Object is in an error state because of an invalid expression. It is not queryable.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ObjectState.EvaluationError">
            <summary>
            Object is in an error state because an error occurred during expression evaluation. It is not queryable.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ObjectState.DependencyError">
            <summary>
            Object is in an error state because some of its calculation dependencies are in an error state. It is not queryable.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ObjectState.Incomplete">
            <summary>
            Some parts of the object have no data. Refresh the object to add the rest of the data. The object is queryable. Applies to non-calculated objects, such as DataColumns, partitions, and tables.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ObjectState.ForceCalculationNeeded">
            <summary>
            The data is possibly outdated, but is in a queryable state. Applies only for CalculatedTable.
            </summary><remarks>This value is only supported at database compatibility level of 1400 or above for Pbi server.</remarks>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Alignment">
            <summary>
            An enumeration of possible values for aligning data in a cell.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.Alignment.Default">
            <summary>
            Aligns string or numerical values based on the culture.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.Alignment.Left">
            <summary>
            Aligns string or numerical values to the left.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.Alignment.Right">
            <summary>
            Aligns string or numerical values to the right.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.Alignment.Center">
            <summary>
            Centers string or numerical values within a cell.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.AggregateFunction">
            <summary>
            Specifies the aggregate function to be used by reporting tools to summarize column values.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.AggregateFunction.Default">
            <summary>
            The default aggregation is Sum for numeric columns. Otherwise the default is None.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.AggregateFunction.None">
            <summary>
            Leaves the aggregate function unspecified.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.AggregateFunction.Sum">
            <summary>
            Calculates the sum of values contained in the column. This is the default aggregation function.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.AggregateFunction.Min">
            <summary>
            Returns the lowest value for all child members.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.AggregateFunction.Max">
            <summary>
            Returns the highest value for all child members.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.AggregateFunction.Count">
            <summary>
            Returns the rows count in the table.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.AggregateFunction.Average">
            <summary>
            Calculates the average of values for all non-empty child members.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.AggregateFunction.DistinctCount">
            <summary>
            Returns the count of all unique child members.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ColumnType">
            <summary>
            An enumeration of possible values for a column type.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ColumnType.Data">
            <summary>
            The contents of this column come from a DataSource.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ColumnType.Calculated">
            <summary>
            The contents of this column are computed by using an expression after the Data columns have been populated.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ColumnType.RowNumber">
            <summary>
            This column is automatically added by the Server to every table.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ColumnType.CalculatedTableColumn">
            <summary>
            The column exists in a calculated table, where the table and its columns are based on a calculated expression.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RoleMemberType">
            <summary>
            Indicates whether the particular member of a security role is an individual user or a group of users, or if the member is automatically detected.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RoleMemberType.Auto">
            <summary>
            Member of security role is automatically detected.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RoleMemberType.User">
            <summary>
            Member of security role is an individual user.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RoleMemberType.Group">
            <summary>
            Member of security role is a group of users.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ModeType">
            <summary>
            Defines the method for making data available in the partition.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModeType.Import">
            <summary>
            Data will be imported from a data source.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModeType.DirectQuery">
            <summary>
            Data will be queried dynamically from a data source.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModeType.Default">
            <summary>
            Only partitions can use this value. When set, the partition will inherit the DefaultMode of the Model.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModeType.Push">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary><remarks>This value is only supported for Pbi server.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModeType.Dual">
            <summary>
            Allows support for dual mode of Import as well as DirectQuery.
            </summary><remarks>This value is only supported when the compatibility level of the database is at 1455 or above.</remarks>
        </member>
        <member name="T:TabularEditor.TOMWrapper.DataViewType">
            <summary>
            Determines which partitions are to be selected to run queries against the model.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataViewType.Full">
            <summary>
            Partitions with DataView set to Default or Full are selected.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataViewType.Sample">
            <summary>
            Partitions with DataView set to Default or Sample are selected.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DataViewType.Default">
            <summary>
            Only Partitions can use this value. When set, the partition will inherit the DataView from the Model.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ModelPermission">
            <summary>
            An enumeration of possible model permissions that can be used in a Role object.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModelPermission.None">
            <summary>
            The role has no access to the model.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModelPermission.Read">
            <summary>
            The role can read metadata and data of the model.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModelPermission.ReadRefresh">
            <summary>
            The role has read and refresh permission.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModelPermission.Refresh">
            <summary>
            The role can refresh the data and calculations in the model.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModelPermission.Administrator">
            <summary>
            Provides full access to the model.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ImpersonationMode">
            <summary>
            Determines how credentials are obtained for an impersonated connection to a data source during data import or refresh.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ImpersonationMode.Default">
            <summary>
            Uses the inherited value from the ImpersonationMode on the DataSourceImpersonationInfo object in the database.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ImpersonationMode.ImpersonateAccount">
            <summary>
            A Windows user account having read permissions on the external data source.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ImpersonationMode.ImpersonateAnonymous">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ImpersonationMode.ImpersonateCurrentUser">
            <summary>
            Not supported for tabular model databases attached to an Analysis Services instance.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ImpersonationMode.ImpersonateServiceAccount">
            <summary>
            Startup account of the Analysis Services instance. This account must have read permissions on a data source to enable data refresh.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ImpersonationMode.ImpersonateUnattendedAccount">
            <summary>
            Do not reference this member directly in your code. It supports the Analysis Services infrastructure.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.DatasourceIsolation">
            <summary>
            Controls the locking behavior of the SQL statements when executing commands against the data source.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DatasourceIsolation.ReadCommitted">
            <summary>
            Specifies that statements cannot read data that has been modified, but not committed, by other transactions. This prevents dirty reads.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DatasourceIsolation.Snapshot">
            <summary>
            Specifies that the data read by any statement in a transaction is transactionally consistent, as if the statements in a transaction receive a snapshot of the committed data as it existed at the start of the transaction.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RelationshipType">
            <summary>
            The type of relationship. Currently, the only possible value is SingleColumn.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RelationshipType.SingleColumn">
            <summary>
            Relationships are constructed using a column-to-column mapping.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.CrossFilteringBehavior">
            <summary>
            Indicates how relationships influence filtering of data. The enumeration defines the possible behaviors.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.CrossFilteringBehavior.OneDirection">
            <summary>
            The rows selected in the 'To' end of the relationship will automatically filter scans of the table in the 'From' end of the relationship.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.CrossFilteringBehavior.BothDirections">
            <summary>
            Filters on either end of the relationship will automatically filter the other table.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.CrossFilteringBehavior.Automatic">
            <summary>
            The engine will analyze the relationships and choose one of the behaviors by using heuristics.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.SecurityFilteringBehavior">
            <summary>
            Indicates how relationships influence filtering of data when evaluating row-level security expressions. The enumeration defines the possible behaviors.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SecurityFilteringBehavior.OneDirection">
            <summary>
            The rows selected in the 'To' end of the relationship will automatically filter scans of the table in the 'From' end of the relationship.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SecurityFilteringBehavior.BothDirections">
            <summary>
            Filters on either end of the relationship will automatically filter the other table.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SecurityFilteringBehavior.None">
            <summary>
            No filtering will occur from either end of the relationship.
            </summary><remarks>This value is only supported when the compatibility level of the database is at 1561 or above.</remarks>
        </member>
        <member name="T:TabularEditor.TOMWrapper.DateTimeRelationshipBehavior">
            <summary>
            When joining two date time columns, indicates whether to join on date and time parts or on date part only.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DateTimeRelationshipBehavior.DateAndTime">
            <summary>
            When joining two date time columns, join on both the date and time parts.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.DateTimeRelationshipBehavior.DatePartOnly">
            <summary>
            When joining two date time columns, join on date part only.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RelationshipEndCardinality">
            <summary>
            An enumeration of possible values for defining cardinality on either side of a table relationship.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RelationshipEndCardinality.None">
            <summary>
            The relationship is unspecified.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RelationshipEndCardinality.One">
            <summary>
            Specifies the 'one' side of a one-to-one or one-to-many relationship.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RelationshipEndCardinality.Many">
            <summary>
            Specifies the 'many' side of a one-to-many relationship.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.HierarchyHideMembersType">
            <summary>
            Ragged/unbalanced hierarchies can be enabled by hiding members.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.HierarchyHideMembersType.Default">
            <summary>
            Regular (balanced) hierarchy
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.HierarchyHideMembersType.HideBlankMembers">
            <summary>
            Hide the member if it has a blank value
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.EncodingHintType">
            <summary>
            Encoding hint to suggest whether a column should use hash encoding.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.EncodingHintType.Default">
            <summary>
            Default behavior - the server will automatically decide which encoding to use
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.EncodingHintType.Hash">
            <summary>
            Hash encoding
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.EncodingHintType.Value">
            <summary>
            Value encoding
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RefreshType">
            <summary>
            An enumeration of possible values for a refresh type.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshType.Full">
            <summary>
            For all partitions in the specified partition, table, or database, refresh data and recalculate all dependents. For a calculation partition, recalculate the partition and all its dependents.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshType.ClearValues">
            <summary>
            Clear values in this object and all its dependents.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshType.Calculate">
            <summary>
            Recalculate this object and all its dependents, but only if needed. This value does not force recalculation, except for volatile formulas.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshType.DataOnly">
            <summary>
            Refresh data in this object and clear all dependents.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshType.Automatic">
            <summary>
            If the object needs to be refreshed and recalculated, refresh and recalculate the object and all its dependents. Applies if the partition is in a state other than Ready.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshType.Add">
            <summary>
            Append data to this partition and recalculate all dependents. This command is valid only for regular partitions and not for calculation partitions.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshType.Defragment">
            <summary>
            Defragment the data in the specified table. As data is added to or removed from a table, the dictionaries of each column can become polluted with values that no longer exist in the actual column values. The defragment option will clean up the values in the dictionaries that are no longer used.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ExtendedPropertyType">
            <summary>
            An enumeration of possible values for the type of value stored in extended property.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ExtendedPropertyType.String">
            <summary>
            The value in this extended property is a raw string with no specific formatting
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ExtendedPropertyType.Json">
            <summary>
            The value in this extended property is a Json.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.MetadataPermission">
            <summary>
            Access control to a data defined by a metadata object.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.MetadataPermission.Default">
            <summary>
            Default behavior - no access control is enforced
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.MetadataPermission.None">
            <summary>
            Access to the data is restricted
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.MetadataPermission.Read">
            <summary>
            Access to the data is unrestricted
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.PowerBIDataSourceVersion">
            <summary>
            DataSource format version in Power BI Service.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1450 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PowerBIDataSourceVersion.PowerBI_V1">
            <summary>
            Power BI V1 Data Sources store the M expressions directly inside the connection strings.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PowerBIDataSourceVersion.PowerBI_V2">
            <summary>
            Power BI V2 Data Sources use shared M Expressions.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.PowerBIDataSourceVersion.PowerBI_V3">
            <summary>
            Power BI V3 Data Sources support basic partition management operations.
            </summary><remarks>This value is only supported when the compatibility level of the database is at 1465 or above.</remarks>
        </member>
        <member name="T:TabularEditor.TOMWrapper.SummarizationType">
            <summary>
            Specifies the Summarization type to be used by alternative sources' columns.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1460 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SummarizationType.GroupBy">
            <summary>
            GroupBy type aggregation.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SummarizationType.Sum">
            <summary>
            Sum type aggregation.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SummarizationType.Count">
            <summary>
            Count type aggregation.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SummarizationType.Min">
            <summary>
            Min type aggregation.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SummarizationType.Max">
            <summary>
            Max type aggregation.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RefreshGranularityType">
            <summary>
            Specifies the granularity of the refresh policy for auto partitioning
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1450 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshGranularityType.Day">
            <summary>
            Granularity of a day
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshGranularityType.Month">
            <summary>
            Granularity of a month
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshGranularityType.Quarter">
            <summary>
            Granularity of a quarter
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshGranularityType.Year">
            <summary>
            Granularity of a year
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshGranularityType.Invalid">
            <summary>
            Invalid Granularity
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.EvaluationBehavior">
            <summary>
            Evaluation behavior for calculated column.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at Preview or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.EvaluationBehavior.Automatic">
            <summary>
            Default value, used for backward compatibility.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.EvaluationBehavior.Static">
            <summary>
            Evaluation is performed during processing and the result is materialized. Applies only for Import mode.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.EvaluationBehavior.Dynamic">
            <summary>
            Evaluation is performed dynamically and the result is not materialized.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RefreshPolicyMode">
            <summary>
            Mode of a refresh policy.
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1565 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshPolicyMode.Import">
            <summary>
            Creates import partitions during incremental refresh.
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshPolicyMode.Hybrid">
            <summary>
            Creates import and DirectQuery partitions during incremental refresh.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RefreshPolicyType">
            <summary>
            Specifies the refresh policy type of a table
            </summary><remarks>This enum is only supported when the compatibility level of the database is at 1450 or above.</remarks>
        </member>
        <member name="F:TabularEditor.TOMWrapper.RefreshPolicyType.Basic">
            <summary>
            Basic refresh policy
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Variation">
            <summary>
            Variation object.
            </summary><remarks>This metadata object is only supported for Pbi server, at database compatibility level of 1400 or above for Box server, at database compatibility level of 1400 or above for Excel server.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Variation.Annotations">
            <summary>The collection of Annotations on the current Variation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Variation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Variation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Variation.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Variation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Variation.Description">
            <summary>
            Missing comment
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Variation.IsDefault">
            <summary>
            If true, the Variation is the Default one for the Column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Variation.Column">
            <summary>
            Missing comment
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Variation.Relationship">
            <summary>
            Missing comment
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Variation.DefaultHierarchy">
            <summary>
            Missing comment
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Variation.DefaultColumn">
            <summary>
            Missing comment
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.CreateNew(TabularEditor.TOMWrapper.Column,System.String)">
            <summary>
            Creates a new Variation and adds it to the parent Column.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.Clone(System.String,TabularEditor.TOMWrapper.Column)">
            <summary>
            Creates an exact copy of this Variation object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Variation.Parent">
            <summary>The parent Column of the current Variation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Variation.#ctor(Microsoft.AnalysisServices.Tabular.Variation,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.VariationCollection">
            <summary>
            Collection class for Variation. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.VariationCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.VariationCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.VariationCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the VariationCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.VariationCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.VariationCollection.IsDefault">
            <summary>
            Sets the IsDefault property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.VariationCollection.Relationship">
            <summary>
            Sets the Relationship property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.VariationCollection.DefaultHierarchy">
            <summary>
            Sets the DefaultHierarchy property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.VariationCollection.DefaultColumn">
            <summary>
            Sets the DefaultColumn property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.StructuredDataSource">
            <summary>
            Represents a data source that uses JSON-based extensible protocol to define the location and mechanism of retrieving the data.
            </summary><remarks>This metadata object is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.ContextExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.StructuredDataSource.CreateNew(TabularEditor.TOMWrapper.Model,System.String)">
            <summary>
            Creates a new StructuredDataSource and adds it to the parent Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.StructuredDataSource.Clone(System.String)">
            <summary>
            Creates an exact copy of this StructuredDataSource object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Parent">
            <summary>The parent Model of the current Structured Data Source.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.StructuredDataSource.#ctor(Microsoft.AnalysisServices.Tabular.StructuredDataSource,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Protocol">
            <summary>
            Connection protocol
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.IndexedProperties">
            <summary>
            Lists all the properties that are part of a nested JSON structure on the model. These properties can be accessed through
            their respective IndexerProperty as well as directly on the <see cref="T:TabularEditor.TOMWrapper.StructuredDataSource"/> object. For example, the
            <see cref="P:TabularEditor.TOMWrapper.StructuredDataSource.Password"/> property is part of the <see cref="P:TabularEditor.TOMWrapper.StructuredDataSource.Credential"/> indexer.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Options">
            <summary>
            Protocol-specific options used to connect the data source
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Credential">
            <summary>
            Protocol-specific options used to authenticate the connection. The most common options are also available as properties on the data source object itself, such as <see cref="P:TabularEditor.TOMWrapper.StructuredDataSource.Account"/>
            and <see cref="P:TabularEditor.TOMWrapper.StructuredDataSource.Password"/>, etc.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Address">
            <summary>
            Address of a connection. It contains protocol name and protocol-specific properties like server and database name.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Username">
            <summary>
            Username property or null if it's not set. This is a shortcut for Credential.Username.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Password">
            <summary>
            Password property or null if it's not set. This is a shortcut for Credential.Password.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.PrivacySetting">
            <summary>
            Privacy setting from PrivacyClass or null if it's not present in the Credential property. Missing value is equivalent to the value of PrivacyClass.None.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.AuthenticationKind">
            <summary>
            Authentication kind, usually one of the AuthenticationKind constants. This is a shortcut for Credential.AuthenticationKind.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.EncryptConnection">
            <summary>
            Whether connection must be encrypted. This is a shortcut for Credential.EncryptConnection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Account">
            <summary>
            Account. This is a shortcut for ConnectionDetails.Address.Account.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.ConnectionString">
            <summary>
            Connection string. This is a shortcut for ConnectionDetails.Address.ConnectionString.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.ContentType">
            <summary>
            Content type. This is a shortcut for ConnectionDetails.Address.ContentType.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Query">
            <summary>
            Native query (typically a SQL statement) to be sent to the source. This is a shortcut for ConnectionDetails.Query.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Database">
            <summary>
            Database name. This is a shortcut for ConnectionDetails.Address.Database.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Domain">
            <summary>
            Domain. This is a shortcut for ConnectionDetails.Address.Domain.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.EmailAddress">
            <summary>
            Email address. This is a shortcut for ConnectionDetails.Address.EmailAddress.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.AddressModel">
            <summary>
            Model name. This is a shortcut for ConnectionDetails.Address.Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Object">
            <summary>
            Object. This is a shortcut for ConnectionDetails.Address.Object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Path">
            <summary>
            Path. This is a shortcut for ConnectionDetails.Address.Path.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Property">
            <summary>
            Property. This is a shortcut for ConnectionDetails.Address.Property.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Resource">
            <summary>
            Resource. This is a shortcut for ConnectionDetails.Address.Resource.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Schema">
            <summary>
            Schema name. This is a shortcut for ConnectionDetails.Address.Schema.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Server">
            <summary>
            Server address. This is a shortcut for ConnectionDetails.Address.Server;
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.Url">
            <summary>
            Url. This is a shortcut for ConnectionDetails.Address.Url.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.StructuredDataSource.View">
            <summary>
            View. This is a shortcut for ConnectionDetails.Address.View.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.CalculatedColumn">
            <summary>
            Represents a column that is based on a DAX expression in a Table that also contains DataColumns and a RowNumberColumn. A CalculatedColumn can also be added to a calculated table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculatedColumn.Expression">
            <summary>
            The DAX expression that is evaluated for the calculated column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculatedColumn.EvaluationBehavior">
            <summary>
            Evaluation behavior for calculated column.
            </summary><remarks>This property is only supported when the compatibility level of the database is at Preview or above.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculatedColumn.CreateNew(TabularEditor.TOMWrapper.Table,System.String)">
            <summary>
            Creates a new CalculatedColumn and adds it to the parent Table.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculatedColumn.Clone(System.String,System.Boolean,TabularEditor.TOMWrapper.Table)">
            <summary>
            Creates an exact copy of this CalculatedColumn object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculatedColumn.Parent">
            <summary>The parent Table of the current Calculated Column.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculatedColumn.#ctor(Microsoft.AnalysisServices.Tabular.CalculatedColumn,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculatedColumn.DependsOn">
            <summary>
            Gets the list of objects that this calculated column depends on.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.CalculatedTableColumn">
            <summary>
            Represents a column in a Table that is based on a DAX expression. A collection of CalculatedTableColumn, under a Table object bound to a partition with Source of type CalculatedPartitionSource, results in a calculated table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculatedTableColumn.IsNameInferred">
            <summary>
            A boolean value indicating whether name of the column is inferred by the server.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculatedTableColumn.SourceColumn">
            <summary>
            Name of the column from which data will be retrieved. The name must match a column returned during processing or refresh, where the partition source is an expression (as the Expression of a CalculatedPartitionSource).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculatedTableColumn.ColumnOrigin">
            <summary>
            Returns a ColumnOrigin object. Applicable only to non-calculated columns of a calculated table. ColumnOrigin points to another column which is the source of this column' metadata and data.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculatedTableColumn.CreateNew(TabularEditor.TOMWrapper.Table,System.String)">
            <summary>
            Creates a new CalculatedTableColumn and adds it to the parent Table.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculatedTableColumn.Clone(System.String,System.Boolean,TabularEditor.TOMWrapper.Table)">
            <summary>
            Creates an exact copy of this CalculatedTableColumn object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculatedTableColumn.Parent">
            <summary>The parent Table of the current Calculated Table Column.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculatedTableColumn.#ctor(Microsoft.AnalysisServices.Tabular.CalculatedTableColumn,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Column">
            <summary>
            Represents a base class of a column object of a Tabular model, used to specify a DataColumn, RowNumberColumn, CalculatedColumn, or CalculatedTableColumn.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.DataType">
            <summary>
            For a DataColumn, specifies the data type. See <see href="https://msdn.microsoft.com/library/gg492146.aspx" /> for a list of supported data types.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.IsDataTypeInferred">
            <summary>
            A boolean value indicating whether the datatype is inferred.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.Annotations">
            <summary>The collection of Annotations on the current Column.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Column.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Column.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Column.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.DataCategory">
            <summary>
            Specifies the type of data contained in the column so that you can add custom behaviors based on column type. There are 248 possible values. The first ten are Invalid (-1), All (1), Regular (2), Image (3), ImageBMP (4), ImageGIF (5), ImageJPG (6), ImagePNG (7), ImageTIFF (8), ImageURL (9), Id (10). For the rest, please refer to the MS-SSAS-T SQL Server Analysis Services Tabular Protocol documentation on MSDN.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.Description">
            <summary>
            The description of the column, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.IsHidden">
            <summary>
            A boolean value that indicates whether a column is treated as hidden by client visualization tools. True if the column is treated as hidden; otherwise false.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.State">
            <summary>
            Enumerates the state of the column. Possible values include the following. Ready (1) The column is queryable and has up-to-date data. NoData (3) The column is queryable but has no data. This state is applicable only to columns of the type Data. CalculationNeeded (4) The column is not queryable and needs to be refreshed (that is, recalculated) to become functional. This state applies only to columns of the type Calculated or CalculatedTableColumn. SemanticError (5) The column is in an error state because of an invalid expression. The column is not queryable. This state applies only to columns of the type Calculated or CalculatedTableColumn. EvaluationError (6) The column is in an error state because of an error during expression evaluation. The column is not queryable.  This state applies only to columns of the type Calculated or CalculatedTableColumn. DependencyError (7) The column is in an error state because some of its calculation dependencies are in an error state.  The column is not queryable. This state applies only to columns of the type Calculated or CalculatedTableColumn. Incomplete (8) Some parts of the column have no data, and the column needs to be refreshed to bring the data in. The column is queryable. This state applies only to columns of the type Data. SyntaxError (9) The column is in an error state because of a syntax error in its expression. The column is not queryable. This state applies only to columns of the type Calculated.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.IsUnique">
            <summary>
            A boolean value that indicates whether the column contains only unique values. True if the values are unique; otherwise false.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.IsKey">
            <summary>
            A boolean value that indicates whether the column is a key of the table. True if the column is a key of the table; otherwise false.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.IsNullable">
            <summary>
            If <b>false</b>, the column cannot contain nulls. Even if <b>true</b>, it may still not allow nulls if it's a key column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.Alignment">
            <summary>
            Specifies the text alignment of the column in report visualizations. The possible values are Default (1), Left (2), Right (3), Center (4).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.TableDetailPosition">
            <summary>
            Determines whether you can place this column in the DefaultDetails collection of the Table. This collection is an ordered set of Column types. A positive value indicates participation in the collection. The collection is sorted in ascending order of this element. The DefaultDetails collection is returned as part of the CSDL metadata returned by the DISCOVER_CSDL_METADATA operation.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.IsDefaultLabel">
            <summary>
            A boolean value that indicates whether this column is included in the DisplayKey element in CSDL.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.IsDefaultImage">
            <summary>
            A boolean value that indicates whether this column is returned as the DefaultImage property in CSDL.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.SummarizeBy">
            <summary>
            A value indicating the default function, if any, used to aggregate this field. The possible values are Default (1), None (2), Sum (3), Min (4), Max (5), Count (6), Average (7), DistinctCount (8). If unspecified, Default is assumed for numeric fields, None for all other fields.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.Type">
            <summary>
            Specifies the data binding. Values include Data (1) where the contents of this column come from a DataSource, Calculated (2) where the contents are computed from an expression after the Data columns have been populated, RowNumber (3) where the column is an internal column representing the row number, or CalculatedTableColumn (4) where tables that are based on a calculated expression will automatically infer and generate the columns in the table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.FormatString">
            <summary>
            A string that specifies the format of the column contents.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.IsAvailableInMDX">
            <summary>
            A boolean value that indicates whether the column can be excluded from usage in MDX query tools. False if the column can be excluded from usage in MDX query tools; otherwise true.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.KeepUniqueRows">
            <summary>
            Specifies the grouping behavior used for building a hierarchy. True groups by entity key. False groups by value.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.DisplayOrdinal">
            <summary>
            Indicates the visual position of the column, defined as a relative ordering rather than a strict ordering (example: 10, 20, 40, 50). It allows client applications to maintain a consistent column position.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.ErrorMessage">
            <summary>
            A string that explains the error state associated with the current object. It is set by the engine only when the state of the object is one of these three values: SemanticError, DependencyError, or EvaluationError. It is applicable only to columns of the type Calculated or CalculatedTableColumn. It will be empty for other column objects.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.SourceProviderType">
            <summary>
            The original data type of the column as defined in the language of the data source. This data type is used to generate queries directly against the data source, for example in DirectQuery mode.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.DisplayFolder">
            <summary>
            Defines the display folder for the column, for use by clients.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.TranslatedDisplayFolders">
            <summary>
            Collection of localized Display Folders for the current Column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.EncodingHint">
            <summary>
            This property allows an encoding hint to be specified for the column. A numeric column may use either value-based encoding or hash-based encoding. Usually the server will automatically attempt detect which encoding to use, but re-encoding may occur later. This property allows hinting to the server that it should start with a different encoding type.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.LineageTag">
            <summary>
            A tag that represents the lineage of the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1540 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.SourceLineageTag">
            <summary>
            A tag that represents the lineage of the source for the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1550 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.Table">
            <summary>The parent table of the current Column.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.SortByColumn">
            <summary>
            Indicates that the column defining this property will be sorted by the values of the column referenced by this property.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.InPerspective">
            <Summary>
            Collection of perspectives in which this Column is visible.
            </Summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.TranslatedDescriptions">
            <summary>
            Collection of localized descriptions for this Column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.TranslatedNames">
            <summary>
            Collection of localized names for this Column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.Synonyms">
            <summary>
            Collection of localized synonyms for this Column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.Variations">
            <summary>
            The collection of Variation objects on this Column.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.#ctor(Microsoft.AnalysisServices.Tabular.Column,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.RelateTo(System.String,System.String)">
            <summary>
            Creates a relationship from the current column to another column.
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.RelateTo(TabularEditor.TOMWrapper.Column)">
            <summary>
            Creates a relationship from the current column to another column.
            </summary>
            <param name="column"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.IsVisible">
            <summary>
            Gets the visibility of the Column. Takes into consideration that a column is not visible if its parent table is hidden. 
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.ReferencedBy">
            <summary>
            Gets the list of objects that reference this column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.UsedInHierarchies">
            <summary>
            Enumerates all hierarchies in which this column is used as a level.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.UsedInLevels">
            <summary>
            Enumerates all hierarchy levels that are based on this column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.UsedInSortBy">
            <summary>
            Enumerates all columns where this column is used as the SortBy column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.UsedInVariations">
            <summary>
            Enumerates all <see cref="T:TabularEditor.TOMWrapper.Variation"/> in which this column is used as a <see cref="P:TabularEditor.TOMWrapper.Variation.DefaultColumn"/>.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.UsedInAlternateOfs">
            <summary>
            Enumerates all <see cref="T:TabularEditor.TOMWrapper.AlternateOf"/> objects in which this column is a <see cref="P:TabularEditor.TOMWrapper.AlternateOf.BaseColumn"/>.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.UsedInRelationships">
            <summary>
            Enumerates all relationships in which this column participates (either as <see cref="P:TabularEditor.TOMWrapper.SingleColumnRelationship.FromColumn">FromColumn</see> or <see cref="P:TabularEditor.TOMWrapper.SingleColumnRelationship.ToColumn">ToColumn</see>).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.ObjectLevelSecurity">
            <summary>
            Gets the OLS settings applied to this column
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.AddAlternateOf(TabularEditor.TOMWrapper.Column,TabularEditor.TOMWrapper.SummarizationType)">
            <summary>
            Marks this column as an alternate of a column in another table, for aggregation purposes. See <see cref="T:TabularEditor.TOMWrapper.AlternateOf"/>.
            </summary>
            <param name="column"></param>
            <param name="summarization"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.RemoveAlternateOf">
            <summary>
            Removes the <see cref="T:TabularEditor.TOMWrapper.AlternateOf"/> configuration for this column.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.AlternateOf">
            <summary>
            Gets or sets the Alternate Of configuration used to specify aggregations.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.GroupByColumns">
            <summary>
            A collection of columns that should be grouped together with this column when used in visuals (RelatedColumnDetails).
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.OnPropertyChanging(System.String,System.Object,System.Boolean@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Column.OnPropertyChanged(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.DaxObjectFullName">
            <summary>
            Gets a fully qualified DAX reference to this column
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.DaxObjectName">
            <summary>
            Gets an unqualified DAX reference to this column
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Column.DaxTableName">
            <summary>
            Gets a DAX reference to the table on which this column resides
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ColumnCollection">
            <summary>
            Collection class for Column. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ColumnCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the ColumnCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.DataType">
            <summary>
            Sets the DataType property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.IsDataTypeInferred">
            <summary>
            Sets the IsDataTypeInferred property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.DataCategory">
            <summary>
            Sets the DataCategory property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.IsHidden">
            <summary>
            Sets the IsHidden property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.IsUnique">
            <summary>
            Sets the IsUnique property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.IsKey">
            <summary>
            Sets the IsKey property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.IsNullable">
            <summary>
            Sets the IsNullable property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.Alignment">
            <summary>
            Sets the Alignment property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.TableDetailPosition">
            <summary>
            Sets the TableDetailPosition property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.IsDefaultLabel">
            <summary>
            Sets the IsDefaultLabel property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.IsDefaultImage">
            <summary>
            Sets the IsDefaultImage property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.SummarizeBy">
            <summary>
            Sets the SummarizeBy property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.FormatString">
            <summary>
            Sets the FormatString property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.IsAvailableInMDX">
            <summary>
            Sets the IsAvailableInMDX property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.KeepUniqueRows">
            <summary>
            Sets the KeepUniqueRows property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.DisplayOrdinal">
            <summary>
            Sets the DisplayOrdinal property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.SourceProviderType">
            <summary>
            Sets the SourceProviderType property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.DisplayFolder">
            <summary>
            Sets the DisplayFolder property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.EncodingHint">
            <summary>
            Sets the EncodingHint property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.SourceLineageTag">
            <summary>
            Sets the SourceLineageTag property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ColumnCollection.SortByColumn">
            <summary>
            Sets the SortByColumn property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Culture">
            <summary>
            Represents a user culture. It is a child of a Model object, used for translating strings and formatting values.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Culture.Annotations">
            <summary>The collection of Annotations on the current Culture.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Culture.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Culture.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Culture.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Culture.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.CreateNew(TabularEditor.TOMWrapper.Model,System.String)">
            <summary>
            Creates a new Culture and adds it to the parent Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.Clone(System.String)">
            <summary>
            Creates an exact copy of this Culture object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Culture.Parent">
            <summary>The parent Model of the current Culture.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Culture.#ctor(Microsoft.AnalysisServices.Tabular.Culture,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Culture.ContentType">
            <summary>
            Specifies the type of the linguistic metadata from the Content property. E.g. XML or JSON.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Culture.Content">
            <summary>
            A string that contains the natural language synonyms.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.CultureCollection">
            <summary>
            Collection class for Culture. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CultureCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CultureCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CultureCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the CultureCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.DataColumn">
            <summary>
            Represents a column in a Table that gets data from an external data source.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataColumn.SourceColumn">
            <summary>
            Name of the column from which data will be retrieved. The name must match a column returned during processing or refresh, where the partition source is a query (as the Query of a CalculatedPartitionSource).
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataColumn.CreateNew(TabularEditor.TOMWrapper.Table,System.String)">
            <summary>
            Creates a new DataColumn and adds it to the parent Table.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataColumn.Clone(System.String,System.Boolean,TabularEditor.TOMWrapper.Table)">
            <summary>
            Creates an exact copy of this DataColumn object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataColumn.Parent">
            <summary>The parent Table of the current Data Column.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataColumn.#ctor(Microsoft.AnalysisServices.Tabular.DataColumn,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.DataSource">
            <summary>
            Defines an open connection to an external data source for import, refresh, or DirectQuery operations on a Tabular <see cref="T:TabularEditor.TOMWrapper.Model" />.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSource.Annotations">
            <summary>The collection of Annotations on the current Data Source.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Data Source.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Data Source.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSource.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Data Source.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSource.Description">
            <summary>
            The description of the data source, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSource.Type">
            <summary>
            The type of DataSource. At present, the only possible value is Provider, which refers to a data source that accepts a connection string.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSource.MaxConnections">
            <summary>
            The maximum number of connections to be opened concurrently to the data source.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSource.Parent">
            <summary>The parent Model of the current Data Source.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSource.#ctor(Microsoft.AnalysisServices.Tabular.DataSource,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSource.UsedByTables">
            <summary>
            Enumerates the tables that use this data source
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSource.UsedByPartitions">
            <summary>
            Enumerates the partitions that use this data source
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.DataSourceCollection">
            <summary>
            Collection class for DataSource. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSourceCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSourceCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSourceCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the DataSourceCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSourceCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DataSourceCollection.MaxConnections">
            <summary>
            Sets the MaxConnections property of all objects in the collection at once.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.DataSourceCollection.SetPlaceholder(System.String,System.String)">
            <summary>
            Replaces any occurence of the specified "keyword" with the specified "replaceWith", in the
            ConnectionString property of all Provider Data Sources in the collection.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ExternalModelRoleMember">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ExternalModelRoleMember.IdentityProvider">
            <summary>
            A string that defines the identity provider used for authentication.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ExternalModelRoleMember.MemberType">
            <summary>
            Indicates whether the particular member of a security role is an individual user or a group of users, or automatically detected. Possible values are as follows. Auto (1): Member is automatically detected. User (2): Member is an individual user. Group (3): Member is a security group.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ExternalModelRoleMember.CreateNew(TabularEditor.TOMWrapper.ModelRole,System.String,System.String)">
            <summary>
            Creates a new ExternalModelRoleMember and adds it to the parent ModelRole.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ExternalModelRoleMember.Clone(System.String,TabularEditor.TOMWrapper.ModelRole)">
            <summary>
            Creates an exact copy of this ExternalModelRoleMember object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ExternalModelRoleMember.Parent">
            <summary>The parent Model Role of the current External Model Role Member.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ExternalModelRoleMember.#ctor(Microsoft.AnalysisServices.Tabular.ExternalModelRoleMember,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ExternalModelRoleMember.CreateNew(TabularEditor.TOMWrapper.ModelRole,System.String,System.String,System.String)">
            <summary>
            Creates a new ExternalModelRoleMember and adds it to the parent ModelRole.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Hierarchy">
            <summary>
            Represents a collection of levels that provide a logical hierarchical drilldown path for client applications. It is a child of a Table object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.Annotations">
            <summary>The collection of Annotations on the current Hierarchy.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Hierarchy.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Hierarchy.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Hierarchy.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.Description">
            <summary>
            The description of the hierarchy, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.IsHidden">
            <summary>
            A boolean value that indicates whether the hierarchy is treated as hidden by client visualization tools. True if the hierarchy is treated as hidden; otherwise false.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.State">
            <summary>
            Provides information on the state of the hierarchy. Possible values and their interpretation are as follows. Ready (1) The hierarchy is queryable and has up-to-date data. NoData (3) Not applicable to Hierarchy. CalculationNeeded (4) The hierarchy does not contain any data because it was not refreshed. There is no error associated with the hierarchy. SemanticError (5) Not applicable to Hierarchy. EvaluationError (6) Not applicable to Hierarchy. DependencyError (7) A dependency associated with the hierarchy is in an error state (SemanticError, EvaluationError, or DependencyError). Incomplete (8) Not applicable to Hierarchy.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.DisplayFolder">
            <summary>
            Defines the display folder for the hierarchy, for use by clients.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.TranslatedDisplayFolders">
            <summary>
            Collection of localized Display Folders for the current Hierarchy.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.HideMembers">
            <summary>
            Ragged/unbalanced hierarchies can be enabled by hiding members using this property.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.LineageTag">
            <summary>
            A tag that represents the lineage of the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1540 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.SourceLineageTag">
            <summary>
            A tag that represents the lineage of the source for the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1550 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.Table">
            <summary>The parent table of the current Hierarchy.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.InPerspective">
            <Summary>
            Collection of perspectives in which this Hierarchy is visible.
            </Summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.TranslatedDescriptions">
            <summary>
            Collection of localized descriptions for this Hierarchy.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.TranslatedNames">
            <summary>
            Collection of localized names for this Hierarchy.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.Synonyms">
            <summary>
            Collection of localized synonyms for this Hierarchy.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.CreateNew(TabularEditor.TOMWrapper.Table,System.String)">
            <summary>
            Creates a new Hierarchy and adds it to the parent Table.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.Clone(System.String,System.Boolean,TabularEditor.TOMWrapper.Table)">
            <summary>
            Creates an exact copy of this Hierarchy object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.Parent">
            <summary>The parent Table of the current Hierarchy.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.Levels">
            <summary>
            The collection of Level objects on this Hierarchy.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.#ctor(Microsoft.AnalysisServices.Tabular.Hierarchy,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.IsVisible">
            <summary>
            Gets the visibility of the Hierarchy. Takes into consideration that a hierarchy is not visible if its parent table is hidden. 
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.UsedInVariations">
            <summary>
            Enumerates the <see cref="T:TabularEditor.TOMWrapper.Variation"/> objects in which this hierarchy is used
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.DaxObjectFullName">
            <summary>
            Gets a fully qualified reference to this hirearchy
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.AddLevels(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Column},System.Int32)">
            <summary>
            Adds a set of levels to the current hirearchy.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.AddLevel(TabularEditor.TOMWrapper.Column,System.String,System.Int32)">
            <summary>
            Adds a level to the current hirearchy.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Hierarchy.AddLevel(System.String,System.String,System.Int32)">
            <summary>
            Adds a level to the current hirearchy.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Hierarchy.Reordering">
            <summary>
            Set to true, when multiple levels are going to be re-ordered as one action.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.HierarchyCollection">
            <summary>
            Collection class for Hierarchy. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.HierarchyCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.HierarchyCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.HierarchyCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the HierarchyCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.HierarchyCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.HierarchyCollection.IsHidden">
            <summary>
            Sets the IsHidden property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.HierarchyCollection.DisplayFolder">
            <summary>
            Sets the DisplayFolder property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.HierarchyCollection.HideMembers">
            <summary>
            Sets the HideMembers property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.HierarchyCollection.SourceLineageTag">
            <summary>
            Sets the SourceLineageTag property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.KPI">
            <summary>
            Represents a Key Performance Indicator object. It is a child of a Measure object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.Annotations">
            <summary>The collection of Annotations on the current KPI.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current KPI.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current KPI.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.ExtendedProperties">
            <summary>The collection of Extended Properties on the current KPI.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.Description">
            <summary>
            The description of the KPI, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.TargetDescription">
            <summary>
            The description of the target value of the KPI.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.TargetExpression">
            <summary>
            An expression that evaluates to a number and indicates the goal for the KPI.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.TargetFormatString">
            <summary>
            The format string to be used when presenting the target value for the KPI.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.StatusGraphic">
            <summary>
            The recommended graphic to represent the status of this KPI.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.StatusDescription">
            <summary>
            A description of the Status value for the KPI.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.StatusExpression">
            <summary>
            An expression that is used to calculate the status of the KPI.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.TrendGraphic">
            <summary>
            A string that identifies the graphic to show for the trend of the KPI.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.TrendDescription">
            <summary>
            A description of the trend value of the KPI.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.TrendExpression">
            <summary>
            An expression representing the trend of the KPI.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.Measure">
            <summary>
            A reference to a Measure object that owns this KPI.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.KPI.#ctor(Microsoft.AnalysisServices.Tabular.KPI,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.DependsOn">
            <summary>
            Gets the list of objects that this KPI depends on.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.Expression">
            <summary>
            An expression that is use to calculate the status of this KPI. Alias for <see cref="P:TabularEditor.TOMWrapper.KPI.StatusExpression"/>
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.KPI.ReferencedBy">
            <summary>
            Gets the list of objects that reference this measure.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Level">
            <summary>
            Represents a level in a hierarchy that provides a logical hierarchical drilldown path for client applications. It is a child of a Hierarchy object. The level is based on the values in a column.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.Annotations">
            <summary>The collection of Annotations on the current Level.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Level.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Level.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Level.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.Ordinal">
            <summary>
            The position of the level within the hierarchy. The levels in the hierarchy must be properly ordered, starting with 1 and increasing monotonically.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.Description">
            <summary>
            The description of the level, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.LineageTag">
            <summary>
            A tag that represents the lineage of the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1540 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.SourceLineageTag">
            <summary>
            A tag that represents the lineage of the source for the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1550 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.Hierarchy">
            <summary>
            A reference to a Hierarchy object that owns this level.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.Column">
            <summary>
            A reference to a Column object associated with this Level.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.TranslatedDescriptions">
            <summary>
            Collection of localized descriptions for this Level.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.TranslatedNames">
            <summary>
            Collection of localized names for this Level.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.Synonyms">
            <summary>
            Collection of localized synonyms for this Level.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.CreateNew(TabularEditor.TOMWrapper.Hierarchy,System.String)">
            <summary>
            Creates a new Level and adds it to the parent Hierarchy.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.Clone(System.String,System.Boolean,TabularEditor.TOMWrapper.Hierarchy)">
            <summary>
            Creates an exact copy of this Level object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Level.Parent">
            <summary>The parent Hierarchy of the current Level.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Level.#ctor(Microsoft.AnalysisServices.Tabular.Level,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.LevelCollection">
            <summary>
            Collection class for Level. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.LevelCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.LevelCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.LevelCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the LevelCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.LevelCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.LevelCollection.SourceLineageTag">
            <summary>
            Sets the SourceLineageTag property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Measure">
            <summary>
            Represents a value that is calculated based on an expression. It is a child of a Table object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.Annotations">
            <summary>The collection of Annotations on the current Measure.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Measure.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Measure.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Measure.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.Description">
            <summary>
            The description of the measure, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.Expression">
            <summary>
            The DAX expression that is evaluated for the calculated measure.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.FormatString">
            <summary>
            A string that specifies the format of the measure contents. For
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.IsHidden">
            <summary>
            A boolean value that indicates whether the measure is treated as hidden by client visualization tools. True if the measure is treated as hidden by client visualization tools; otherwise false.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.State">
            <summary>
            Provides information on the state of the measure. Possible values and their interpretation are as follows. Ready (1) The measure is queryable and has up-to-date data. NoData (3) Not applicable to Measure. CalculationNeeded (4) Not applicable to Measure. SemanticError (5) The measure expression has a semantic error. EvaluationError (6) Not applicable to Measure. DependencyError (7) A dependency associated with this measure is in an error state (SemanticError, EvaluationError, or DependencyError). Incomplete (8) Not applicable to Measure. SyntaxError (9) The measure has a syntax error in its expression.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.IsSimpleMeasure">
            <summary>
            A boolean value that indicates whether the measure is an implicit measure that is automatically created by client tools to aggregate a field. Client applications can hide measures that have this flag set.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.DisplayFolder">
            <summary>
            Defines the display folder for the Measure, for use by clients.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.TranslatedDisplayFolders">
            <summary>
            Collection of localized Display Folders for the current Measure.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.DataCategory">
            <summary>
            Specifies the type of data contained in the measure so that you can add custom behaviors based on measure type.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1455 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.LineageTag">
            <summary>
            A tag that represents the lineage of the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1540 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.SourceLineageTag">
            <summary>
            A tag that represents the lineage of the source for the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1550 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.Table">
            <summary>The parent table of the current Measure.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.InPerspective">
            <Summary>
            Collection of perspectives in which this Measure is visible.
            </Summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.TranslatedDescriptions">
            <summary>
            Collection of localized descriptions for this Measure.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.TranslatedNames">
            <summary>
            Collection of localized names for this Measure.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.Synonyms">
            <summary>
            Collection of localized synonyms for this Measure.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.CreateNew(TabularEditor.TOMWrapper.Table,System.String)">
            <summary>
            Creates a new Measure and adds it to the parent Table.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.Clone(System.String,System.Boolean,TabularEditor.TOMWrapper.Table)">
            <summary>
            Creates an exact copy of this Measure object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.Parent">
            <summary>The parent Table of the current Measure.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.#ctor(Microsoft.AnalysisServices.Tabular.Measure,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.IsVisible">
            <summary>
            Gets the visibility of the Measure. Takes into consideration that a measure is visible regardless of its parent table being visible.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.MoveTo(TabularEditor.TOMWrapper.Table)">
            <summary>
            Delete the measure from its current table and create a deep clone (including all translations, if any) in the destination table.
            </summary>
            <param name="destinationTable"></param>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.DataType">
            <summary>
            Describes the type of data contained in the column. Possible values are as follows. String (2). Int64 (6). Double (8). DateTime (9). Decimal (10). Boolean (11). Binary (17). Unknown (19) A measure in an error state. Variant (20) A measure with varying data type.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.MoveTo(System.String)">
            <summary>
            Delete the measure from its current table and create a deep clone (including all translations, if any) in the destination table.
            </summary>
            <param name="destinationTable"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.ChildErrorCount">
            <summary>
            Returns a count indicating the number of children of this objects that have errors
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.ErrorMessage">
            <summary>
            A string that explains the error state associated with the current object. It is set by the engine only when the state of the object is one of these three values: SemanticError, DependencyError, or EvaluationError. It is applicable only to columns of the type Calculated or CalculatedTableColumn. It will be empty for other column objects.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.DependsOn">
            <summary>
            Gets the list of objects that this measure depends on.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.ReferencedBy">
            <summary>
            Gets the list of objects that reference this measure.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.AddKPI">
            <summary>
            Adds a <see cref="T:TabularEditor.TOMWrapper.KPI"/> to this measure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Measure.RemoveKPI">
            <summary>
            Removes the <see cref="T:TabularEditor.TOMWrapper.KPI"/> from this measure.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.KPI">
            <summary>
            Gets or sets the KPI of the Measure.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.DetailRowsExpression">
            <summary>
            A DAX expression specifying detail rows for this measure (drill-through in client tools).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.FormatStringExpression">
            <summary>
            DAX expression that specifies the format of the cell content.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.DaxObjectName">
            <summary>
            Gets a valid DAX reference to this measure
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.DaxObjectFullName">
            <summary>
            Gets a valid DAX reference to this measure
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Measure.DaxTableName">
            <summary>
            Gets a valid DAX reference to the table on which this measure resides
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.MeasureCollection">
            <summary>
            Collection class for Measure. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MeasureCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.MeasureCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.MeasureCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the MeasureCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MeasureCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MeasureCollection.Expression">
            <summary>
            Sets the Expression property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MeasureCollection.FormatString">
            <summary>
            Sets the FormatString property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MeasureCollection.IsHidden">
            <summary>
            Sets the IsHidden property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MeasureCollection.IsSimpleMeasure">
            <summary>
            Sets the IsSimpleMeasure property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MeasureCollection.DisplayFolder">
            <summary>
            Sets the DisplayFolder property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MeasureCollection.DataCategory">
            <summary>
            Sets the DataCategory property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MeasureCollection.SourceLineageTag">
            <summary>
            Sets the SourceLineageTag property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Model">
            <summary>
            A Tabular model created at compatibility level 1200 or above.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.HasLocalChanges">
            <summary>
            Returns the status of local changes made to the model, which haven't been saved to the server.
            <para>If the model is not connected, this value is always <b>False</b>.</para></summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Annotations">
            <summary>The collection of Annotations on the current Model.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Model.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Model.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Model.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Description">
            <summary>
            The description of the model, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.StorageLocation">
            <summary>
            The location on disk to place the model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DefaultMode">
            <summary>
            The default method for making data available in the partition.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DefaultDataView">
            <summary>
            Used by partitions in the model to determine the type of query that retrieves data. A Full dataview retrieves an unfiltered rowset, used for in-memory models and deployed DirectQuery models. A Sample data view is a subset of data used during DirectQuery model design.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Culture">
            <summary>
            The name of the Culture used for formatting. Once it's used by a child object, this value can't be changed.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Collation">
            <summary>
            The collation sequence. Analysis Services uses Windows collations.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DefaultPowerBIDataSourceVersion">
            <summary>
            Used by PBIX data source format conversion.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1450 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.ForceUniqueNames">
            <summary>
            Determines whether measures can have the same names as any column in the model.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1465 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DiscourageImplicitMeasures">
            <summary>
            Determines whether to discourage the implicit measures.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1470 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DiscourageReportMeasures">
            <summary>
            Determines whether to discourage the report measures.
            </summary><remarks>This property is only supported when the compatibility level of the database is at Internal or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DataSourceDefaultMaxConnections">
            <summary>
            DataSourceDefaultMaxConnections will be used for connections to a data source if MaxConnections is set to -1 on the data source object or if there is no corresponding data source object for the data source.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1510 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.SourceQueryCulture">
            <summary>
            The name of the Culture used for formatting during refresh through Mashup.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1520 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.MAttributes">
            <summary>
            The string that has M attributes.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1535 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DiscourageCompositeModels">
            <summary>
            Determines whether to discourage composite models.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1560 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DisableAutoExists">
            <summary>
            Disable auto exists behavior for SummarizeColumns
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1566 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.MaxParallelismPerRefresh">
            <summary>
            Determines the max possible number of parallel tasks in data refresh, within the resource constraints of the hosting service.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1568 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.MaxParallelismPerQuery">
            <summary>
            Maximum degree of parallelism for query in formula engine
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1569 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DisableSystemDefaultExpression">
            <summary>
            Disable system defined default expression behavior for calculation groups.
            </summary><remarks>This property is only supported when the compatibility level of the database is at Preview or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DefaultMeasure">
            <summary>
            A reference to a default measure.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.TranslatedDescriptions">
            <summary>
            Collection of localized descriptions for this Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.TranslatedNames">
            <summary>
            Collection of localized names for this Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Perspectives">
            <summary>
            The collection of Perspective objects on this Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Cultures">
            <summary>
            The collection of Culture objects on this Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DataSources">
            <summary>
            The collection of DataSource objects on this Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Roles">
            <summary>
            The collection of ModelRole objects on this Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Tables">
            <summary>
            The collection of Table objects on this Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Relationships">
            <summary>
            The collection of Relationship objects on this Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Expressions">
            <summary>
            The collection of NamedExpression objects on this Model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.QueryGroups">
            <summary>
            The collection of QueryGroup objects on this Model.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.#ctor(Microsoft.AnalysisServices.Tabular.Model,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.AutomaticAggregationOptions">
            <summary>
            Protocol-specific options used to connect the data source
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddPerspective(System.String)">
            <summary>
            Adds a new <see cref="T:TabularEditor.TOMWrapper.Perspective"/> to the <see cref="T:TabularEditor.TOMWrapper.Model"/>.
            </summary>
            <param name="name">The name of the new perspective to add</param>
            <returns>The newly added perspective.</returns>
            <exception cref="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernanceException"></exception>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddExpression(System.String,System.String)">
            <summary>
            Alias for <see cref="M:TabularEditor.TOMWrapper.Model.AddSharedExpression(System.String,System.String)"/>
            </summary>
            <param name="name">The name of the new shared expression</param>
            <param name="expression">The M/Power Query string to add to the shared expression</param>
            <returns>The newly added shared expression</returns>
            <exception cref="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernanceException"></exception>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddSharedExpression(System.String,System.String)">
            <summary>
            Adds a new <see cref="T:TabularEditor.TOMWrapper.NamedExpression"/> (aka. Shared Expression) to the <see cref="T:TabularEditor.TOMWrapper.Model"/>.
            </summary>
            <param name="name">The name of the new shared expression</param>
            <param name="expression">The M/Power Query string to add to the shared expression</param>
            <returns>The newly added shared expression</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.ApplyRefreshPolicy">
            <summary>
            Applies refresh policy on all tables in the model, where Incremental Refresh Policy has been configured.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.ApplyRefreshPolicy(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Table})">
            <summary>
            Applies refresh policy on the specified tables.
            </summary>
            <param name="tables">The tables on which to apply refresh policy</param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddCalculatedTable(System.String,System.String)">
            <summary>
            Adds a new <see cref="T:TabularEditor.TOMWrapper.CalculatedTable"/> to the <see cref="T:TabularEditor.TOMWrapper.Model"/>.
            </summary>
            <param name="name">The name of the new table to add</param>
            <param name="expression">The expression to assign to the calculated table</param>
            <returns>A reference to the newly added calculated table</returns>
            <remarks>Tabular Editor 3 automatically populates the <see cref="T:TabularEditor.TOMWrapper.CalculatedTableColumn">columns</see> on the calculated table based on its DAX <see cref="P:TabularEditor.TOMWrapper.CalculatedTable.Expression"/>.</remarks>
            <exception cref="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernanceException"></exception>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddCalculationGroupTable(System.String)">
            <summary>
            Adds a new <see cref="T:TabularEditor.TOMWrapper.CalculationGroupTable"/> to the <see cref="T:TabularEditor.TOMWrapper.Model"/>.
            </summary>
            <remarks>
            Use the <see cref="M:TabularEditor.TOMWrapper.CalculationGroupTable.AddCalculationItem(System.String,System.String)"/> method to add calculation items to the calculation group.
            </remarks>
            <param name="name">The name of the new calculation group table to add.</param>
            <returns>A reference to the newly added calculation group table</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddCalculationGroup(System.String)">
            <summary>
            Alias for <see cref="M:TabularEditor.TOMWrapper.Model.AddCalculationGroupTable(System.String)"/>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddTable(System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TabularEditor.TOMWrapper.Table"/> to the <see cref="T:TabularEditor.TOMWrapper.Model"/>.
            </summary>
            <remarks>
            This is a regular (Imported or DirectQuery) table. Use <see cref="M:TabularEditor.TOMWrapper.Model.AddCalculatedTable(System.String,System.String)"/> or <see cref="M:TabularEditor.TOMWrapper.Model.AddCalculationGroupTable(System.String)"/> to create other types of tables.
            </remarks>
            <param name="name">Name of the new table to create</param>
            <param name="createPartition">Set to false if the table should be created without partitions</param>
            <returns>A reference to the newly created table</returns>
            <exception cref="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernanceException"></exception>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddRelationship">
            <summary>
            Adds a new <see cref="T:TabularEditor.TOMWrapper.SingleColumnRelationship">relationship</see> to the <see cref="T:TabularEditor.TOMWrapper.Model"/>.
            </summary>
            <returns>A reference to the newly created relationship</returns>
            <exception cref="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernanceException"></exception>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddTranslation(System.String)">
            <summary>
            Adds a new <see cref="P:TabularEditor.TOMWrapper.Model.Culture"/> to the <see cref="T:TabularEditor.TOMWrapper.Model"/>. A culture is used to add metadata translations to a model.
            </summary>
            <param name="cultureId">The culture ID, for example "en-US"</param>
            <returns>A reference to the newly created culture</returns>
            <exception cref="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernanceException"></exception>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddRole(System.String)">
            <summary>
            Adds a new <see cref="T:TabularEditor.TOMWrapper.ModelRole">role</see> to the <see cref="T:TabularEditor.TOMWrapper.Model"/>. Roles are used to add security (RLS and/or OLS) to a model.
            </summary>
            <param name="name">The name of the new role to add</param>
            <returns>A reference to the newly created role</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddDataSource(System.String)">
            <summary>
            Adds a new <see cref="T:TabularEditor.TOMWrapper.ProviderDataSource"/> (aka. Legacy Data Source) to the <see cref="T:TabularEditor.TOMWrapper.Model"/>.
            </summary>
            <remarks>
            Use the <see cref="M:TabularEditor.TOMWrapper.Model.AddStructuredDataSource(System.String)"/> method to add a structured aka. Power Query data source.
            </remarks>
            <param name="name">The name of the new data source to add</param>
            <returns>A reference to the newly created data source</returns>
            <exception cref="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernanceException"></exception>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.AddStructuredDataSource(System.String)">
            <summary>
            Adds a new <see cref="T:TabularEditor.TOMWrapper.StructuredDataSource"/> to the <see cref="T:TabularEditor.TOMWrapper.Model"/>.
            </summary>
            <param name="name">The name of the new data source to add</param>
            <returns>A reference to the newly created data source</returns>
            <exception cref="T:System.InvalidOperationException">This exception is thrown when attempting to add a structured data source to a model with a <see cref="P:TabularEditor.TOMWrapper.Database.CompatibilityLevel"/> less than 1400.</exception>
            <exception cref="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernanceException"></exception>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.AllHierarchies">
            <summary>
            A collection of every hierarchy across all tables in the model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.AllColumns">
            <summary>
            A collection of every column across all tables in the model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.AllCalculationItems">
            <summary>
            Iterates all calculation items on all calculation groups of the model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.AllPartitions">
            <summary>
            A collection of every partition across all tables in the model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.AllMeasures">
            <summary>
            A collection of every measure across all tables in the model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.AllKPIs">
            <summary>
            A collection of every KPI across all tables in the model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.AllLevels">
            <summary>
            Iterates all levels on all hierarchies on all tables of the model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.DeploymentMetadata">
            <summary>
            Metadata related to the latest deployment performed on this model using Tabular Editor.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.RemoveDeploymentMetadata">
            <summary>
            Removes deployment metadata.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Model.UpdateDeploymentMetadata">
            <summary>
            Update deployment metadata.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.Database">
            <summary>
            The database object of the model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.FastCombine">
            <summary>
            Gets or sets whether privacy settings on individual data sources should be ignored.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.LegacyRedirects">
            <summary>
            Gets or sets whether unsafe legacy redirects from HTTPS to HTTP should be enabled
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.ReturnErrorValuesAsNull">
            <summary>
            Gets or sets whether individual query errors should be returned as nulls in the query result instead of failing the query
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Model.CalculationGroups">
            <summary>
            Enumerate all <see cref="T:TabularEditor.TOMWrapper.CalculationGroupTable">calculation group tables</see> on this model.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ModelRole">
            <summary>
            Defines a set of user principals for whom security rules are applied. It is a child of a Model object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.Annotations">
            <summary>The collection of Annotations on the current Model Role.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Model Role.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Model Role.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Model Role.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.Description">
            <summary>
            The description of the role, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.ModelPermission">
            <summary>
            The level of access for this role. Possible values are as follows. None (1): The role has no access to the model. Read (2): The role can read metadata and data of the model. ReadRefresh (3): The role has read and refresh permission. Refresh (4): The role can refresh the data and calculations in the model. Administrator (5): The role can administer the model.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.CreateNew(TabularEditor.TOMWrapper.Model,System.String)">
            <summary>
            Creates a new ModelRole and adds it to the parent Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.Clone(System.String)">
            <summary>
            Creates an exact copy of this ModelRole object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.Parent">
            <summary>The parent Model of the current Model Role.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.Members">
            <summary>
            The collection of ModelRoleMember objects on this ModelRole.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.TablePermissions">
            <summary>
            The collection of TablePermission objects on this ModelRole.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.#ctor(Microsoft.AnalysisServices.Tabular.ModelRole,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.RowLevelSecurity">
            <summary>
            The RLS settings defined for this role
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.MetadataPermission">
            <summary>
            The OLS settings defined for this role
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRole.RoleMembers">
            <summary>
            Specify domain/usernames of the members in this role. One member per line. DEPRECATED: Use the Members collection instead.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.ClearMembers">
            <summary>
            Removes all members from this role.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.AddWindowsMember(System.String,System.String)">
            <summary>
            Adds a Windows AD member to this role.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRole.AddExternalMember(System.String,System.String)">
            <summary>
            Adds an Azure AD member to this role.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ModelRoleCollection">
            <summary>
            Collection class for ModelRole. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the ModelRoleCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleCollection.ModelPermission">
            <summary>
            Sets the ModelPermission property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ModelRoleMember">
            <summary>
            Defines a user principal that belongs to the Role. It is a child of a Role object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleMember.Annotations">
            <summary>The collection of Annotations on the current Model Role Member.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Model Role Member.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Model Role Member.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleMember.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Model Role Member.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleMember.MemberName">
            <summary>
            The security name that identifies the user or group of the member.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleMember.MemberID">
            <summary>
            A reference to a Member object associated with this RoleMembership.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleMember.Role">
            <summary>
            A reference to a Role object that owns this RoleMembeship.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleMember.Parent">
            <summary>The parent Model Role of the current Model Role Member.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMember.#ctor(Microsoft.AnalysisServices.Tabular.ModelRoleMember,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ModelRoleMemberCollection">
            <summary>
            Collection class for ModelRoleMember. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleMemberCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMemberCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ModelRoleMemberCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the ModelRoleMemberCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleMemberCollection.MemberName">
            <summary>
            Sets the MemberName property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ModelRoleMemberCollection.MemberID">
            <summary>
            Sets the MemberID property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Partition">
            <summary>
            Represents a partition in a table. Partitions define the query against external data sources that return the rowsets of a <see cref="T:TabularEditor.TOMWrapper.Table" />.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.SourceType">
            <summary>
            The type of source used by the Partition. This is either a query against a DataSource, or for calculated tables, an expression.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.Annotations">
            <summary>The collection of Annotations on the current Partition.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Partition.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Partition.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Partition.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.Description">
            <summary>
            The description of the partition, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.State">
            <summary>
            Provides information on the state of the partition. Possible values are as follows. Ready (1): The partition is queryable and has up-to-date data. NoData (3): The partition is queryable but has no data. This state applies only to partitions with a type other than Calculated. CalculationNeeded (4): The partition is not queryable and needs to be refreshed (that is, recalculated) to become functional. This state applies only to partitions of the type Calculated. SemanticError (5): The partition is in an error state because of an invalid expression and is not queryable. This state applies only to partitions of the type Calculated. EvaluationError (6): The partition is in an error state because of an error during expression evaluation. The partition is not queryable. This state applies only to partitions of the type Calculated. DependencyError (7): The partition is in an error state because some of its calculation dependencies are in an error state. The partition is not queryable. This state applies only to partitions of the type Calculated. Incomplete (8): Some parts of the partition have no data, and the partition needs to be refreshed to bring the data in. The partition is queryable. This state applies only to partitions of a type other than Calculated. SyntaxError (9): The partition is in an error state because of a syntax error in its expression. The partition is not queryable. This state applies only to partitions of the type Calculated.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.Mode">
            <summary>
            Defines the method for making data available in the partition. Possible values are as follows. Import (0) Data will be imported from a data source. DirectQuery (1) Data will be queried dynamically from a data source. Default (2): Only partitions can use this value. When set, the partition will inherit the DefaultMode of the Model. Push (3): Data will be pushed into the partition. The Mode of a Partition can be set to Default (2), in which case it will inherit its Mode from the DefaultMode of the Model
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.DataView">
            <summary>
            Determines which partitions should be selected to run queries against the model. The possible values are as follows. Full (0) - Partitions with DataView set to Default or Full are selected. Sample (1): Partitions with DataView set to Default or Sample are selected. SampleAndFull (2): All partitions are selected. Default (3) - Inherits from the default DataView of the Model object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.ErrorMessage">
            <summary>
            The string that explains the error state associated with the current object. It is set by the engine only when the state of the object is one of these three values: SemanticError, DependencyError, or EvaluationError.This element applies only to partitions of the type Calculated.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.Table">
            <summary>The parent table of the current Partition.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.QueryGroup">
            <summary>
            QueryGroup associated with the partition.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1480 or above.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.CreateNew(TabularEditor.TOMWrapper.Table,System.String)">
            <summary>
            Creates a new Partition and adds it to the parent Table.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.Clone(System.String,TabularEditor.TOMWrapper.Table)">
            <summary>
            Creates an exact copy of this Partition object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.Parent">
            <summary>The parent Table of the current Partition.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Partition.#ctor(Microsoft.AnalysisServices.Tabular.Partition,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.Query">
            <summary>
            The query which is executed on the Data Source to populate this partition with data. This is an alias for <see cref="P:TabularEditor.TOMWrapper.Partition.Expression"/>
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.Expression">
            <summary>
            The expression which is used to populate this partition with data.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Partition.DataSource">
            <summary>
            The Data Source used by this partition.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.PartitionCollection">
            <summary>
            Collection class for Partition. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PartitionCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.PartitionCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.PartitionCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the PartitionCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PartitionCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PartitionCollection.Mode">
            <summary>
            Sets the Mode property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PartitionCollection.DataView">
            <summary>
            Sets the DataView property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PartitionCollection.QueryGroup">
            <summary>
            Sets the QueryGroup property of all objects in the collection at once.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.PartitionCollection.ConvertToLegacy(TabularEditor.TOMWrapper.ProviderDataSource)">
            <summary>
            Converts all M partitions in this collection to regular partitions. The M query is left as-is and needs to be converted to SQL before the partition can be processed.
            </summary>
            <param name="providerSource"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.PartitionCollection.ConvertToPowerQuery">
            <summary>
            Converts all provider source partitions in this collection to M partitions. The provider query is left as-is and needs to be converted to an M query before the partition can be processed.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PartitionCollection.PropertyGridPartitions">
            <summary>
            This property points to the PartitionCollection itself. It is used only to display a clickable
            "Partitions" property in the Property Grid, which will open the PartitionCollectionEditor when
            clicked.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Set">
            <summary>
            Set object.
            </summary><remarks>This metadata object is only supported at database compatibility level of 1400 or above for Pbi server.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.Annotations">
            <summary>The collection of Annotations on the current Set.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Set.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Set.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Set.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.Description">
            <summary>
            The description of the set
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.Expression">
            <summary>
            The DAX expression that is evaluated for the calculated set.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.IsDynamic">
            <summary>
            Indicates whether the set is static or dynamic
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.IsHidden">
            <summary>
            A boolean value that indicates whether the set is treated as hidden by client visualization tools. True if the set is treated as hidden by client visualization tools; otherwise false.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.State">
            <summary>
            Provides information on the state of the set. Possible values and their interpretation are as follows. Ready (1) The set is queryable and has up-to-date data. NoData (3) Not applicable to Set. CalculationNeeded (4) Not applicable to Set. SemanticError (5) The set expression has a semantic error. EvaluationError (6) Not applicable to Set. DependencyError (7) A dependency associated with this set is in an error state (SemanticError, EvaluationError, or DependencyError). Incomplete (8) Not applicable to Set. SyntaxError (9) The measure has a syntax error in its expression.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.ErrorMessage">
            <summary>
            The string that explains the error state associated with the current object. It is set by the engine only when the state of the object is one of these three values: SemanticError, DependencyError or EvaluationError.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.DisplayFolder">
            <summary>
            Defines the display folder for the Measure, for use by clients.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.TranslatedDisplayFolders">
            <summary>
            Collection of localized Display Folders for the current Set.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.Table">
            <summary>The parent table of the current Set.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.CreateNew(TabularEditor.TOMWrapper.Table,System.String)">
            <summary>
            Creates a new Set and adds it to the parent Table.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.Clone(System.String,TabularEditor.TOMWrapper.Table)">
            <summary>
            Creates an exact copy of this Set object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Set.Parent">
            <summary>The parent Table of the current Set.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Set.#ctor(Microsoft.AnalysisServices.Tabular.Set,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.SetCollection">
            <summary>
            Collection class for Set. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SetCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.SetCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.SetCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the SetCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SetCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SetCollection.Expression">
            <summary>
            Sets the Expression property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SetCollection.IsDynamic">
            <summary>
            Sets the IsDynamic property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SetCollection.IsHidden">
            <summary>
            Sets the IsHidden property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SetCollection.DisplayFolder">
            <summary>
            Sets the DisplayFolder property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Perspective">
            <summary>
            Defines a logical view over the Model and is a child of a Model object. It allows hiding Tables, Columns, Measures, and Hierarchies so that end users can look at a smaller subset of the large data model.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Perspective.Annotations">
            <summary>The collection of Annotations on the current Perspective.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Perspective.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Perspective.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Perspective.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Perspective.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Perspective.Description">
            <summary>
            The description of the perspective, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Perspective.TranslatedDescriptions">
            <summary>
            Collection of localized descriptions for this Perspective.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Perspective.TranslatedNames">
            <summary>
            Collection of localized names for this Perspective.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.CreateNew(TabularEditor.TOMWrapper.Model,System.String)">
            <summary>
            Creates a new Perspective and adds it to the parent Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.Clone(System.String,System.Boolean)">
            <summary>
            Creates an exact copy of this Perspective object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Perspective.Parent">
            <summary>The parent Model of the current Perspective.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Perspective.#ctor(Microsoft.AnalysisServices.Tabular.Perspective,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.PerspectiveCollection">
            <summary>
            Collection class for Perspective. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PerspectiveCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.PerspectiveCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.PerspectiveCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the PerspectiveCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PerspectiveCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ProviderDataSource">
            <summary>
            Represents a data source that uses a connection string for the connection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ProviderDataSource.ConnectionString">
            <summary>
            A string used to open the connection to the data source.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ProviderDataSource.ImpersonationMode">
            <summary>
            Determines how credentials are obtained for an impersonated connection to a data source during data import or refresh.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ProviderDataSource.Account">
            <summary>
            The user account used for impersonation.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ProviderDataSource.Password">
            <summary>
            The account password.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ProviderDataSource.Isolation">
            <summary>
            Specifies the locking behavior of the SQL statements when executing commands against the data source. Valid values include ReadCommitted (default) which only reads from committed transactions, or Snapshot which can read any statement in a transaction that is transactionally consistent.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ProviderDataSource.Timeout">
            <summary>
            The timeout in seconds for commands executed against the data source.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ProviderDataSource.Provider">
            <summary>
            An optional string that identifies the name of the managed data provider for the data source.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ProviderDataSource.CreateNew(TabularEditor.TOMWrapper.Model,System.String)">
            <summary>
            Creates a new ProviderDataSource and adds it to the parent Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ProviderDataSource.Clone(System.String)">
            <summary>
            Creates an exact copy of this ProviderDataSource object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.ProviderDataSource.Parent">
            <summary>The parent Model of the current Provider Data Source.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ProviderDataSource.#ctor(Microsoft.AnalysisServices.Tabular.ProviderDataSource,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ProviderDataSource.SetPlaceholder(System.String,System.String)">
            <summary>
            Replaces any occurence of the specified "keyword" with the specified "replaceWith", in the
            ConnectionString property of this data source.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Relationship">
            <summary>
            Represents a logical relationship between two Table objects. It is a child of a Model object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.ToTable">
            <summary>
            Gets the destination table in a directional table relationship.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.FromTable">
            <summary>
            Gets the starting table in a directional table relationship.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.Annotations">
            <summary>The collection of Annotations on the current Relationship.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Relationship.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Relationship.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Relationship.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.IsActive">
            <summary>
            A boolean value that indicates whether the relationship is marked as Active or Inactive. An Active relationship is automatically used for filtering across tables. An Inactive relationship can be used explicitly by DAX calculations with the USERELATIONSHIP function.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.Type">
            <summary>
            The type of Relationship. At present, the only possible value is SingleColumn (1) or a normal column-column relationship.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.CrossFilteringBehavior">
            <summary>
            Indicates how relationships influence filtering of data. The enumeration defines the possible behaviors. Possible values are as follows. OneDirection (1) The rows selected in the 'To' end of the relationship will automatically filter scans of the table in the 'From' end of the relationship. BothDirections (2) Filters on either end of the relationship will automatically filter the other table. Automatic (3) The engine will analyze the relationships and choose one of the behaviors by using heuristics.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.JoinOnDateBehavior">
            <summary>
            When joining two date time columns, indicates whether to join on date and time parts, or on date part only. DateAndTime (1) When joining two date time columns, join on date and time parts. DatePartOnly (2) When joining two date time columns, join on date part only.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.RelyOnReferentialIntegrity">
            <summary>
            Unused; reserved for future use.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.State">
            <summary>
            Provides information on the state of the relationship. Possible values and their interpretation are as follows. Ready (1) The relationship is queryable and has up-to-date data. NoData (3) Not applicable to relationships. CalculationNeeded (4) The relationship does not contain any data because it was not refreshed. There is no error associated with the relationship. SemanticError (5) Not applicable to Relationship. EvaluationError (6) Not applicable to Relationship. DependencyError (7) A dependency associated with this relationship is in an error state (SemanticError, EvaluationError, or DependencyError). Incomplete (8) Not applicable to relationships. SyntaxError (9) Not applicable to relationships.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.SecurityFilteringBehavior">
            <summary>
            Indicates how relationships influence filtering of data when evaluating row-level security expressions. Possible values are as follows. OneDirection (1): The rows selected in the 'To' end of the relationship will automatically filter scans of the table in the 'From' end of the relationship. BothDirections (2): Filters on either end of the relationship will automatically filter the other table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.Parent">
            <summary>The parent Model of the current Relationship.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Relationship.#ctor(Microsoft.AnalysisServices.Tabular.Relationship,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.UsedInVariations">
            <summary>
            Enumerates the <see cref="T:TabularEditor.TOMWrapper.Variation"/> objects in which this relationship is used.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Relationship.ErrorMessage">
            <summary>
            A string that explains the error state associated with the current object. It is set by the engine only when the state of the object is one of these three values: SemanticError, DependencyError, or EvaluationError. It is applicable only to columns of the type Calculated or CalculatedTableColumn. It will be empty for other column objects.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RelationshipCollection">
            <summary>
            Collection class for Relationship. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.RelationshipCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.RelationshipCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.RelationshipCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the RelationshipCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.RelationshipCollection.IsActive">
            <summary>
            Sets the IsActive property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.RelationshipCollection.CrossFilteringBehavior">
            <summary>
            Sets the CrossFilteringBehavior property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.RelationshipCollection.JoinOnDateBehavior">
            <summary>
            Sets the JoinOnDateBehavior property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.RelationshipCollection.RelyOnReferentialIntegrity">
            <summary>
            Sets the RelyOnReferentialIntegrity property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.RelationshipCollection.SecurityFilteringBehavior">
            <summary>
            Sets the SecurityFilteringBehavior property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.SingleColumnRelationship">
            <summary>
            SingleColumnRelationship object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SingleColumnRelationship.FromColumn">
            <summary>
            Gets or sets the starting column in a single column relationship.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SingleColumnRelationship.ToColumn">
            <summary>
            Gets or sets the destination column in a single column relationship.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SingleColumnRelationship.FromCardinality">
            <summary>
            Indicates whether the "From" end of the relationship has a cardinality of One (1) or Many (2).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SingleColumnRelationship.ToCardinality">
            <summary>
            Indicates whether the "To" end of the relationship has a cardinality of One (1) or Many (2).
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.SingleColumnRelationship.CreateNew(TabularEditor.TOMWrapper.Model,System.String)">
            <summary>
            Creates a new SingleColumnRelationship and adds it to the parent Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.SingleColumnRelationship.Clone(System.String)">
            <summary>
            Creates an exact copy of this SingleColumnRelationship object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.SingleColumnRelationship.Parent">
            <summary>The parent Model of the current Single Column Relationship.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.SingleColumnRelationship.#ctor(Microsoft.AnalysisServices.Tabular.SingleColumnRelationship,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Table">
            <summary>
            Represents a Table in the data model. A Table object is a member of the <see cref="T:TabularEditor.TOMWrapper.TableCollection" /> object under a <see cref="T:TabularEditor.TOMWrapper.Model" /> object. It contains a <see cref="T:TabularEditor.TOMWrapper.ColumnCollection" />. Rows are based on <see cref="T:TabularEditor.TOMWrapper.Partition" /> object or a <see cref="T:TabularEditor.TOMWrapper.CalculatedPartitionSource" /> if the Table is a calculated table.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Annotations">
            <summary>The collection of Annotations on the current Table.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Table.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Table.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Table.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.DataCategory">
            <summary>
            Specifies the type of Table so that you can customize application behavior based on the type of data in the table. Allowed values are identical to those of dimension type properties for Multidimensional models. Regular is the default. Other values include Time (2), Geography (3), Organization (4), BillOfMaterials (5), Accounts (6), Customers (7), Products (8), Scenario (9), Quantitativ1e (10), Utility (11), Currency (12), Rates (13), Channel (14) - channel dimension, Promotion (15).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Description">
            <summary>
            The description of the table, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.IsHidden">
            <summary>
            A boolean value that indicates whether the table is treated as hidden by client visualization tools. True if the Table is treated as hidden; otherwise false.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.ShowAsVariationsOnly">
            <summary>
            A boolean value that indicates a difference between a local and server version. If True, the Table is only shown when referenced as Variation.
            </summary><remarks>This property is only supported for Pbi server, at database compatibility level of 1400 or above for Box server, at database compatibility level of 1400 or above for Excel server.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.IsPrivate">
            <summary>
            A boolean value that specifies whether to hide a table from the client. True hides the tables.
            </summary><remarks>This property is only supported for Pbi server, at database compatibility level of 1400 or above for Box server, at database compatibility level of 1400 or above for Excel server.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.AlternateSourcePrecedence">
            <summary>
            The ranking or precedence used to select the alternate source table in case more than one match is found.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1460 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.ExcludeFromModelRefresh">
            <summary>
            A boolean value that indicates whether the table is excluded from model refresh. When this is true, a refresh operation on the model would not trigger a refresh on the partitions of the table if they were already processed.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1480 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.LineageTag">
            <summary>
            A tag that represents the lineage of the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1540 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.SourceLineageTag">
            <summary>
            A tag that represents the lineage of the source for the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1550 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.SystemManaged">
            <summary>
            A boolean value that indicates whether the table is managed by the system. The system takes ownership of creation and deletion of such tables.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1562 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.ExcludeFromAutomaticAggregations">
            <summary>
            An indication whether the table is excluded from the automatic aggregations feature.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1572 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.InPerspective">
            <Summary>
            Collection of perspectives in which this Table is visible.
            </Summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.TranslatedDescriptions">
            <summary>
            Collection of localized descriptions for this Table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.TranslatedNames">
            <summary>
            Collection of localized names for this Table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Synonyms">
            <summary>
            Collection of localized synonyms for this Table.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.CreateNew(TabularEditor.TOMWrapper.Model,System.String)">
            <summary>
            Creates a new Table and adds it to the parent Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.Clone(System.String,System.Boolean)">
            <summary>
            Creates an exact copy of this Table object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Parent">
            <summary>The parent Model of the current Table.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Sets">
            <summary>
            The collection of Set objects on this Table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Partitions">
            <summary>
            The collection of Partition objects on this Table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Columns">
            <summary>
            The collection of Column objects on this Table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Hierarchies">
            <summary>
            The collection of Hierarchy objects on this Table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Measures">
            <summary>
            The collection of Measure objects on this Table.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.#ctor(Microsoft.AnalysisServices.Tabular.Table,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.IsVisible">
            <summary>
            Gets whether the table is visible to end users. This is the case if the table contains visible measures.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.TableGroup">
            <summary>
            Gets or sets the name of the Table Group in which this table is displayed (Tabular Editor only)
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.DependsOn">
            <summary>
            Gets the list of objects that this table depends on based on its DAX expression.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.ReferencedBy">
            <summary>
            Gets the list of objects that reference this table based on their DAX expressions.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddMeasure(System.String,System.String,System.String,TabularEditor.TOMWrapper.IInsertOptions)">
            <summary>
            Adds a new measure to the table and returns a reference to the measure.
            </summary>
            <param name="name">Name of the measure</param>
            <param name="expression">DAX expression to assign to the measure</param>
            <param name="displayFolder">Display Folder to assign to the measure</param>
            <param name="insertOptions"></param>
            <returns>A reference to the newly added measure.</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddPartition(System.String,System.String)">
            <summary>
            Adds a new (legacy) partition to the table and returns a reference to the partition.
            </summary>
            <param name="name">The name of the partition</param>
            <param name="query">The query expression to assign to the partition.</param>
            <returns>A reference to the newly added partition.</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddMPartition(System.String,System.String)">
            <summary>
            Adds a new M partition to the table and returns a reference to the partition.
            </summary>
            <param name="name">The name of the partition</param>
            <param name="expression">The M expression to assign to the partition.</param>
            <returns>A reference to the newly added partition.</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddPolicyRangePartition(System.String)">
            <summary>
            Adds a new Policy Range partition to the table and returns a reference to the partition.
            </summary>
            <param name="name">The name of the partition</param>
            <returns>A reference to the newly added partition.</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddEntityPartition(System.String,System.String)">
            <summary>
            Adds a new Entity (DQ over AS) partition to the table and returns a reference to the partition.
            </summary>
            <param name="name">The name of the partition</param>
            <param name="entityName">The name of the entity (source table) to assign to the partition.</param>
            <returns>A reference to the newly added partition.</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddCalculatedColumn(System.String,System.String,System.String,TabularEditor.TOMWrapper.IInsertOptions)">
            <summary>
            Adds a new calculated column to the table and returns a reference to the column.
            </summary>
            <param name="name">The name of the column</param>
            <param name="expression">DAX expression to assign to the column</param>
            <param name="displayFolder">Display Folder to assign to the column</param>
            <param name="insertOptions"></param>
            <returns>A reference to the newly added column</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddDataColumn(System.String,System.String,System.String,TabularEditor.TOMWrapper.DataType,TabularEditor.TOMWrapper.IInsertOptions)">
            <summary>
            Adds a new data column to the table and returns a reference to the column.
            </summary>
            <param name="name">The name of the column</param>
            <param name="sourceColumn">The name of the column in the source query</param>
            <param name="displayFolder">Display Folder to assign to the column</param>
            <param name="dataType">Data Type to assign to the column</param>
            <param name="insertOptions"></param>
            <returns>A reference to the newly added column</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddHierarchy(System.String,System.String,TabularEditor.TOMWrapper.IInsertOptions,TabularEditor.TOMWrapper.Column[])">
            <summary>
            Adds a new hierarchy to the table and returns a reference to the hierarchy.
            </summary>
            <param name="name">Name of the hierarchy.</param>
            <param name="displayFolder">Display folder of the hierarchy.</param>
            <param name="levels">A list of columns to add as levels of the hierarchy</param>
            <param name="insertOptions"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddHierarchy(System.String,System.String,System.String[])">
            <summary>
            Adds a new hierarchy to the table and returns a reference to the hierarchy.
            </summary>
            <param name="name">Name of the hierarchy.</param>
            <param name="displayFolder">Display folder of the hierarchy.</param>
            <param name="levels">A list of column names to add as levels of the hierarchy</param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddHierarchy(System.String,System.String,TabularEditor.TOMWrapper.Column[])">
            <summary>
            Adds a new hierarchy to the table and returns a reference to the hierarchy.
            </summary>
            <param name="name">Name of the hierarchy.</param>
            <param name="displayFolder">Display folder of the hierarchy.</param>
            <param name="levels">A list of column names to add as levels of the hierarchy</param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.AddHierarchy(System.String,System.String,TabularEditor.TOMWrapper.IInsertOptions,System.String[])">
            <summary>
            Adds a new hierarchy to the table and returns a reference to the hierarchy.
            </summary>
            <param name="name">Name of the hierarchy.</param>
            <param name="displayFolder">Display folder of the hierarchy.</param>
            <param name="levels">A list of column names to add as levels of the hierarchy</param>
            <param name="insertOptions"></param>
            <returns></returns>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.AllLevels">
            <summary>
            Enumerates all levels across all hierarchies on this table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.UsedInRelationships">
            <summary>
            Enumerates all relationships in which this table participates.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.DataColumns">
            <summary>
            Enumerates only the <see cref="T:TabularEditor.TOMWrapper.DataColumn">data columns</see> on this table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.CalculatedColumns">
            <summary>
            Enumerates only the <see cref="T:TabularEditor.TOMWrapper.CalculatedColumn">calculated columns</see> on this table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.RelatedTables">
            <summary>
            Enumerates all tables related to or from this table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Source">
            <summary>
            Gets the name of the data source used by the table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.SourceType">
            <summary>
            Gets the type of the data source used by the table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.RowLevelSecurity">
            <summary>
            Provides a convenient way to access the Row Level Filters assigned to this table across different roles.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.DaxObjectName">
            <summary>
            Gets a string that may be used for referencing the table in a DAX expression.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.DaxObjectFullName">
            <summary>
            Gets a string that may be used for referencing the table in a DAX expression.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.DaxTableName">
            <summary>
            Gets a string that may be used for referencing the table in a DAX expression.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.GetChildren">
            <summary>
            Returns all columns, measures, and hierarchies inside this table.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.ObjectLevelSecurity">
            <summary>
            Provides a convenient way to get or set the Object-Level permissions assigned to this table across different roles.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.ErrorMessage">
            <summary>
            Gets the error message currently reported on this table.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.DefaultDetailRowsExpression">
            <summary>
            A DAX expression specifying default detail rows for this table (drill-through in client tools).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.Mode">
            <summary>
            Defines the mode of a refresh policy applied during incremental refresh.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.PolicyType">
            <summary>
            Specifies the type of the refresh policy
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.RollingWindowGranularity">
            <summary>
            Target granularity of the rolling window for the whole dataset
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.RollingWindowPeriods">
            <summary>
            Number of periods for the rolling window for the whole dataset
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.IncrementalGranularity">
            <summary>
            Granularity of the (most recent) incremental refresh range
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.IncrementalPeriods">
            <summary>
            Number of periods for the incremental refresh range
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.IncrementalPeriodsOffset">
            <summary>
            Lag or leading periods from Now() to the rolling window head
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.PollingExpression">
            <summary>
            If not null, M expression that is evaluated and stored for each partition upon each refresh or merge operation. Result is stored in Partition.RefreshBookmark
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.SourceExpression">
            <summary>
            M expression that is used as the source M expression for new partitions. It includes the date filter by referring to 2 M parameters named [RangeStart] and [RangeEnd], which can be dates or integers depending on IntegerDateKey below
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Table.EnableRefreshPolicy">
            <summary>
            Enable or disable incremental refresh policy for this table
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.ApplyRefreshPolicy(System.DateTime)">
            <summary>
            Update partition definitions based on the current refresh policy using the specified Effective Date
            </summary>
            <param name="effectiveDate">Effective Date of the refresh policy.</param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Table.ApplyRefreshPolicy">
            <summary>
            Update partition definitions based on the current refresh policy with Now() as Effective Date
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TableCollection">
            <summary>
            Collection class for Table. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TableCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TableCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the TableCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.DataCategory">
            <summary>
            Sets the DataCategory property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.IsHidden">
            <summary>
            Sets the IsHidden property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.ShowAsVariationsOnly">
            <summary>
            Sets the ShowAsVariationsOnly property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.IsPrivate">
            <summary>
            Sets the IsPrivate property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.AlternateSourcePrecedence">
            <summary>
            Sets the AlternateSourcePrecedence property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.ExcludeFromModelRefresh">
            <summary>
            Sets the ExcludeFromModelRefresh property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.SourceLineageTag">
            <summary>
            Sets the SourceLineageTag property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.SystemManaged">
            <summary>
            Sets the SystemManaged property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TableCollection.ExcludeFromAutomaticAggregations">
            <summary>
            Sets the ExcludeFromAutomaticAggregations property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.WindowsModelRoleMember">
            <summary>
            Represents an individual Windows user account or a Windows security group.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.WindowsModelRoleMember.CreateNew(TabularEditor.TOMWrapper.ModelRole,System.String,System.String)">
            <summary>
            Creates a new WindowsModelRoleMember and adds it to the parent ModelRole.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.WindowsModelRoleMember.Clone(System.String,TabularEditor.TOMWrapper.ModelRole)">
            <summary>
            Creates an exact copy of this WindowsModelRoleMember object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.WindowsModelRoleMember.Parent">
            <summary>The parent Model Role of the current Windows Model Role Member.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.WindowsModelRoleMember.#ctor(Microsoft.AnalysisServices.Tabular.WindowsModelRoleMember,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.NamedExpression">
            <summary>
            A named expression that can be used by one or more partitions.
            </summary><remarks>This metadata object is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.Annotations">
            <summary>The collection of Annotations on the current Named Expression.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Named Expression.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Named Expression.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Named Expression.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.Description">
            <summary>
            The description of the expression, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.Kind">
            <summary>
            The dialect of the expression.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.Expression">
            <summary>
            The expression text.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.MAttributes">
            <summary>
            The string that has M attributes.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1535 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.LineageTag">
            <summary>
            A tag that represents the lineage of the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1540 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.SourceLineageTag">
            <summary>
            A tag that represents the lineage of the source for the object.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1550 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.RemoteParameterName">
            <summary>
            The parameter name defined in source model, applicable only for proxy model and empty for local model.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1570 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.QueryGroup">
            <summary>
            QueryGroup associated with the expression.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1480 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.ParameterValuesColumn">
            <summary>
            Client tools apply filters to this column using M parameter. The presence of this property indicates model owner allows Dax queries to override this parameter, and columns data type must match the type specified in the meta tag of the parameter..
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1545 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.ExpressionSource">
            <summary>
            A reference to the NamedExpression where the parameter associated with the remote model.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1570 or above.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.CreateNew(TabularEditor.TOMWrapper.Model,System.String)">
            <summary>
            Creates a new NamedExpression and adds it to the parent Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.Clone(System.String)">
            <summary>
            Creates an exact copy of this NamedExpression object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpression.Parent">
            <summary>The parent Model of the current Named Expression.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpression.#ctor(Microsoft.AnalysisServices.Tabular.NamedExpression,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.NamedExpressionCollection">
            <summary>
            Collection class for NamedExpression. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpressionCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.NamedExpressionCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the NamedExpressionCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.Kind">
            <summary>
            Sets the Kind property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.Expression">
            <summary>
            Sets the Expression property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.MAttributes">
            <summary>
            Sets the MAttributes property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.SourceLineageTag">
            <summary>
            Sets the SourceLineageTag property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.RemoteParameterName">
            <summary>
            Sets the RemoteParameterName property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.QueryGroup">
            <summary>
            Sets the QueryGroup property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.ParameterValuesColumn">
            <summary>
            Sets the ParameterValuesColumn property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.NamedExpressionCollection.ExpressionSource">
            <summary>
            Sets the ExpressionSource property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.CalculationGroup">
            <summary>
            Represents a collection of Calculation Items.
            </summary><remarks>This metadata object is only supported when the compatibility level of the database is at 1470 or above.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroup.Annotations">
            <summary>The collection of Annotations on the current Calculation Group.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Calculation Group.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Calculation Group.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroup.Description">
            <summary>
            The description of the CalculationGroup, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroup.Precedence">
            <summary>
            Defines an evaluation order of CalculationGroup objects.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroup.Table">
            <summary>The parent table of the current Calculation Group.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroup.CalculationItems">
            <summary>
            The collection of CalculationItem objects on this CalculationGroup.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroup.#ctor(Microsoft.AnalysisServices.Tabular.CalculationGroup,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.CalculationItem">
            <summary>
            A Tabular Calculation Item.
            </summary><remarks>This metadata object is only supported when the compatibility level of the database is at 1470 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.Description">
            <summary>
            The description of the CalculationItem, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.State">
            <summary>
            Provides information on the state of the Expression. Possible values and their interpretation are as follows. Ready (1) The Expression is queryable and has up-to-date data. SemanticError (5) The Expression has a semantic error. DependencyError (7) A dependency associated with this Expression is in an error state (SemanticError, EvaluationError, or DependencyError). SyntaxError (9) The Expression has a syntax error.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.Expression">
            <summary>
            The DAX expression that is evaluated for this CalculationItem.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.Ordinal">
            <summary>
            The zero-based ordinal value associated with a Calculation Item.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1500 or above.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationItem.CreateNew(TabularEditor.TOMWrapper.CalculationGroup,System.String)">
            <summary>
            Creates a new CalculationItem and adds it to the parent CalculationGroup.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationItem.Clone(System.String,TabularEditor.TOMWrapper.CalculationGroup)">
            <summary>
            Creates an exact copy of this CalculationItem object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.Parent">
            <summary>The parent Calculation Group of the current Calculation Item.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationItem.#ctor(Microsoft.AnalysisServices.Tabular.CalculationItem,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.CalculationGroupTable">
            <summary>
            The <see cref="P:TabularEditor.TOMWrapper.CalculationItem.CalculationGroupTable"/> to which this calculation item belongs.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.ErrorMessage">
            <summary>
            A string that explains the error state associated with the current object. It is set by the engine only when the state of the object is one of these three values: SemanticError, DependencyError, or EvaluationError. It is applicable only to columns of the type Calculated or CalculatedTableColumn. It will be empty for other column objects.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.NeedsValidation">
            <summary>
            Indicates if this object needs validation
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.FormatStringExpression">
            <summary>
            A DAX expression that returns a Format String for this calculation item.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItem.DependsOn">
            <summary>
            Gets the list of objects that this calculation item depends on.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.CalculationItemCollection">
            <summary>
            Collection class for CalculationItem. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItemCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationItemCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationItemCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the CalculationItemCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItemCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItemCollection.Expression">
            <summary>
            Sets the Expression property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationItemCollection.PropertyGridCalculationItems">
            <summary>
            This property points to the CalculationItemCollection itself. It is used only to display a clickable
            "Calculation Items" property in the Property Grid, which will open the CalculationItemCollectionEditor when
            clicked.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TablePermission">
            <summary>
            Defines the security rules of the Role on the Table. It is a child of a Role object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.Annotations">
            <summary>The collection of Annotations on the current Table Permission.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Table Permission.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Table Permission.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.ClearExtendedProperties">
            <summary>Removes all Extended Properties from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.ExtendedProperties">
            <summary>The collection of Extended Properties on the current Table Permission.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.HasExtendedProperty(System.String)">
            <summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetExtendedPropertyType(System.Int32)">
            <summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetExtendedPropertyType(System.String)">
            <summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetExtendedProperty(System.Int32)">
            <summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetExtendedProperty(System.String)">
            <summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.SetExtendedProperty(System.Int32,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetNewExtendedPropertyName">
            <summary>Returns a unique name for a new ExtendedProperty.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.SetExtendedProperty(System.String,System.String,TabularEditor.TOMWrapper.ExtendedPropertyType)">
            <summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.RemoveExtendedProperty(System.String)">
            <summary>Remove an ExtendedProperty by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetExtendedPropertyCount">
            <summary>Gets the number of ExtendedProperties on the current object.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.GetExtendedProperties">
            <summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.FilterExpression">
            <summary>
            The DAX expression that filters the rows in the table when this security role is in effect.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.State">
            <summary>
            Provides information on the state of the permission. Possible values and their interpretation are as follows. Ready (1) The permission has a valid expression. NoData (3) Not applicable. CalculationNeeded (4) Not applicable. SemanticError (5) The expression of the TablePermission object has a semantic error. EvaluationError (6) Not applicable. DependencyError (7) A dependency associated with this TablePermission object is in an error state (SemanticError, EvaluationError, or DependencyError). Incomplete (8) Not applicable. SyntaxError (9) The TablePermission object is in an error state because of a syntax error in its expression. The TablePermission object is not queryable. This state applies only to TablePermission objects of the type Calculated.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.MetadataPermission">
            <summary>
            Defines whether the metadata of this table should be secured from users belonging to this role.
            </summary><remarks>This property is only supported when the compatibility level of the database is at 1400 or above.</remarks>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.Role">
            <summary>
            A reference to a Role object that owns this TablePermission.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.Table">
            <summary>The parent table of the current Table Permission.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.CreateNew(TabularEditor.TOMWrapper.ModelRole,System.String)">
            <summary>
            Creates a new TablePermission and adds it to the parent ModelRole.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.Clone(System.String,TabularEditor.TOMWrapper.ModelRole)">
            <summary>
            Creates an exact copy of this TablePermission object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.Parent">
            <summary>The parent Model Role of the current Table Permission.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermission.#ctor(Microsoft.AnalysisServices.Tabular.TablePermission,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.DependsOn">
            <summary>
            Gets the list of objects that this table permission depends on.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermission.ErrorMessage">
            <summary>
                        A string that explains the error state associated with the current object. It is set by the engine only when the state of the object is one of these three values: SemanticError, DependencyError, or EvaluationError. It is applicable only to columns of the type Calculated or CalculatedTableColumn. It will be empty for other column objects.
                        </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TablePermissionCollection">
            <summary>
            Collection class for TablePermission. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermissionCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermissionCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TablePermissionCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the TablePermissionCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermissionCollection.FilterExpression">
            <summary>
            Sets the FilterExpression property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TablePermissionCollection.MetadataPermission">
            <summary>
            Sets the MetadataPermission property of all objects in the collection at once.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.QueryGroup">
            <summary>
            Represents a QueryGroup object. Associated with Partition or NamedExpression objects.
            </summary><remarks>This metadata object is only supported when the compatibility level of the database is at 1480 or above.</remarks>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.ClearAnnotations">
            <summary>Removes all annotations from this object.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.QueryGroup.Annotations">
            <summary>The collection of Annotations on the current Query Group.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.GetAnnotation(System.Int32)">
            <summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.HasAnnotation(System.String)">
            <summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.GetAnnotation(System.String)">
            <summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.SetAnnotation(System.Int32,System.String)">
            <summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.GetNewAnnotationName">
            <summary>Returns a unique name for a new annotation.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.SetAnnotation(System.String,System.String)">
            <summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.RemoveAnnotation(System.String)">
            <summary>Remove an annotation by the given name.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.GetAnnotationsCount">
            <summary>Gets the number of annotations on the current Query Group.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.GetAnnotations">
            <summary>Gets a collection of all annotation names on the current Query Group.</summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.QueryGroup.Folder">
            <summary>
            The logical path of the query group.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.QueryGroup.Description">
            <summary>
            The description of the query-group, visible to developers at design time and to administrators in management tools, such as SQL Server Management Studio.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.CreateNew(TabularEditor.TOMWrapper.Model,System.String)">
            <summary>
            Creates a new QueryGroup and adds it to the parent Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.Clone(System.String)">
            <summary>
            Creates an exact copy of this QueryGroup object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.QueryGroup.Parent">
            <summary>The parent Model of the current Query Group.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroup.#ctor(Microsoft.AnalysisServices.Tabular.QueryGroup,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            CTOR - only called from static factory methods on the class
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.QueryGroupCollection">
            <summary>
            Collection class for QueryGroup. Provides convenient properties for setting a property on multiple objects at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.QueryGroupCollection.Count">
            <summary>The number of items in this collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroupCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.QueryGroupCollection.CreateChildrenFromMetadata">
            <summary>
            Calling this method will populate the QueryGroupCollection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.QueryGroupCollection.Folder">
            <summary>
            Sets the Folder property of all objects in the collection at once.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.QueryGroupCollection.Description">
            <summary>
            Sets the Description property of all objects in the collection at once.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculatedTable.AddCalculatedTableColumn(System.String,System.String,System.String,TabularEditor.TOMWrapper.DataType)">
            <summary>
            Adds a new Calculated Table column to the table.
            </summary>
            <param name="name"></param>
            <param name="sourceColumn"></param>
            <param name="displayFolder"></param>
            <param name="dataType"></param>
            <returns></returns>
            <exception cref="T:TabularEditor.TOMWrapper.PowerBI.PowerBIGovernanceException"></exception>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculatedTable.CreateNew(TabularEditor.TOMWrapper.Model,System.String,System.String)">
            <summary>
            Creates a new Calculated Table and adds it to the specified Model.
            Also creates the underlying metadataobject and adds it to the TOM tree.
            </summary>		
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculatedTable.Expression">
            <summary>
            The Expression of this Calculated Table.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.CalculationGroupTable">
            <summary>
            Calculation Group Tables are special tables that only contain a single column
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.CalculationGroupTable.AddCalculationItem(System.String,System.String)">
            <summary>
            Adds a calculation item with the given name and expression to the calculation group table.
            </summary>
            <param name="name"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroupTable.Reordering">
            <summary>
            Set to true, when multiple calculation items are going to be re-ordered as one action.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroupTable.CalculationGroup">
            <summary>
            The Calculation Group object owned by this Calculation Group Table
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroupTable.CalculationGroupPrecedence">
            <summary>
            When multiple Calculation Groups are used as a filter condition, this property determines the order of evaluation.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroupTable.CalculationGroupDescription">
            <summary>
            The description of the Calculation Group object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroupTable.CalculationGroupAnnotations">
            <summary>
            Annotations on the Calculation Group object.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.CalculationGroupTable.CalculationItems">
            <summary>
            The collection of <see cref="T:TabularEditor.TOMWrapper.CalculationItem"/> items on the <see cref="P:TabularEditor.TOMWrapper.CalculationGroupTable.CalculationGroup"/> of this table.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Database.ExecuteCommand(System.String,System.Boolean)">
            <summary>
            Executes the specified TMSL script against the connected instance of Analysis Services.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Database.ExecuteReader(System.String)">
            <summary>
            Executes the specified DAX query against the connected database and returns an AmoDataReader object that enumerates the result
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Database.ExecuteDax(System.String)">
            <summary>
            Executes the specified DAX query against the connected database and returns a data set containing the result
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Database.EvaluateDax(System.String)">
            <summary>
            Evaluates the specified DAX expression against the connected database and returns a data table or scalar value containing the result
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Database.OnPropertyChanging(System.String,System.Object,System.Boolean@,System.Boolean@)">
            <summary>
            Called before a property is changed on an object. Derived classes can control how the change is handled.
            Throw ArgumentException within this method, to display an error message in the UI.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
            <param name="newValue">New value assigned to the property.</param>
            <param name="undoable">Return false if automatic undo of the property change is not needed.</param>
            <param name="cancel">Return true if the property change should not apply.</param>
        </member>
        <member name="T:TabularEditor.TOMWrapper.DeploymentMetadata">
            <summary>
            Additional metadata that may be added to the model annotations during deployment
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DeploymentMetadata.User">
            <summary>
            Domain and username for the user performing the latest deployment of this model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DeploymentMetadata.Time">
            <summary>
            Date and time of the latest deployment for this model.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DeploymentMetadata.ClientMachine">
            <summary>
            Name of the client machine from which the latest deployment was performed.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DeploymentMetadata.DeploymentMode">
            <summary>
            Specifies how the deployment was performed.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.DeploymentMetadata.TabularEditorBuild">
            <summary>
            Build number of Tabular Editor used for deployment.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.EntityPartition.ExpressionSource">
            <summary>
            IntelliSense("The Expression Source used by this partition.")
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.EntityPartition.EntityName">
            <summary>
            Gets or sets the Name of the underlying referenced object used to query and populate current partition.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Folder">
            <summary>
            Represents a Folder in the TreeView. Does not correspond to any object in the TOM.
            Implements IDisplayFolderObject since a Folder can itself be located within another
            display folder.
            Implements IParentObject since a Folder can contain child objects.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Folder.Delete">
            <summary>
            Deleting a folder does not delete child objects - it just removes the folder.
            Any child folders are retained (but will be moved up the display folder hierarchy).
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.FolderCache">
            <summary>
            Display Folders are not represented as individual objects in TOM. Instead, an object that can be shown in a Display Folder,
            has a DisplayFolder (string) property. However, due to the way most TreeView-style UI components work, it is beneficial
            to construct a cache of display folder objects for each table. Each folder object has a list of child objects. The cache
            needs to be reconstructured when objects are moved around, or when the display culture is changed (as display folders are
            translatable).
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.GroupingColumnCollection.Add(TabularEditor.TOMWrapper.Column)">
            <summary>
            Adds the specified column as a related column
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.GroupingColumnCollection.Remove(TabularEditor.TOMWrapper.Column)">
            <summary>
            Removes the specified column from the collection of related columns
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.GroupingColumnCollection.Clear">
            <summary>
            Removes all columns from the collection of related columns
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ColumnOLSIndexer">
            <summary>
            The ColumnOLSIndexer is used to browse all MetadataPermissions defined on one specific
            column, across all roles in the model. This is in contrast to the RoleOLSIndexer, 
            which browses the permissions across all tables for one specific role.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.PerspectiveIndexer.None">
            <summary>
            Removes the object from all perspectives.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.PerspectiveIndexer.All">
            <summary>
            Includes the object in all perspectives.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RoleColumnOLSIndexer">
            <summary>
            The RolePermissionIndexer is used to browse all metadata permissions across all
            tables in the model, for one specific role.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RoleOLSIndexer">
            <summary>
            The RolePermissionIndexer is used to browse all metadata permissions across all
            tables in the model, for one specific role.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.RoleRLSIndexer">
            <summary>
            The RoleRLSIndexer is used to browse all filters across all tables in the model, for
            one specific role. This is in contrast to the TableRLSIndexer, which browses the
            filters across all roles in the model, for one specific table.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TableOLSIndexer">
            <summary>
            The TableOLSIndexer is used to browse all filters defined on one specific table, across
            all roles in the model. This is in contrast to the RoleOLSIndexer, which browses the
            filters across all tables for one specific role.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TableRLSIndexer">
            <summary>
            The TableRLSIndexer is used to browse all filters defined on one specific table, across
            all roles in the model. This is in contrast to the RoleRLSIndexer, which browses the
            filters across all tables for one specific role.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TranslationIndexer.CopyFrom(TabularEditor.TOMWrapper.TranslationIndexer,System.Func{System.String,System.String})">
            <summary>
            Copy translations from another translation collection.
            </summary>
            <param name="translations"></param>
            <param name="mutator"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TranslationIndexer.Reset">
            <summary>
            Resets the translations of the object. Caption translations are removed, making the object appear with
            the base name in all locales. Display Folder and Description translations are set to the untranslated
            value of the object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TranslationIndexer.Clear">
            <summary>
            Clears all translated values for the object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TranslationIndexer.SetAll(System.String)">
            <summary>
            Sets all translations to the specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:TabularEditor.TOMWrapper.IClonableObject">
            <summary>
            Objects that can be cloned
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ITranslatableObject">
            <summary>
            Objects whose name and description properties can be translated
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.ITabularNamedObject.CanEditName">
            <summary>
            True if the Name property of this object can be changed, false otherwise.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.IHideableObject">
            <summary>
            Objects that can be shown/hidden
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ITabularPerspectiveObject">
            <summary>
            Objects that can be shown/hidden in individual perspectives
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.IDescriptionObject">
            <summary>
            Objects that can have descriptions
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ITomErrorMessageObject">
            <summary>
            Objects that can have error messages in TOM
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.IAnnotationObject">
            <summary>
            Objects that have annotations
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.IExpressionObject">
            <summary>
            Objects that have an expression (measure, calculated column, partition, etc.)
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.IDaxDependantObject">
            <summary>
            Objects that can depend on one or more DAXObjects through expression dependencies
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ITabularTableObject">
            <summary>
            Object that belongs to a specific table.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.IDaxObject">
            <summary>
            Objects that can be referenced in a DAX expression (table, column, measure)
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.IFolderObject">
            <summary>
            Represents an object than can be contained in a Display Folder. Examples:
             - Measures
             - Columns
             - Hierarchies
             - Folders
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.MPartition.Clone(System.String,TabularEditor.TOMWrapper.Table)">
            <summary>
            Creates a copy of this parittion
            </summary>
            <param name="newName"></param>
            <param name="newParent"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MPartition.MExpression">
            <summary>
            The Power Query (M) Expression used to populate the partition with data.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.MPartition.Attributes">
            <summary>
            Gets or sets the M attributes.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PolicyRangePartition.Start">
            <summary>
            Gets or sets the range start of the refresh policy for this partition
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PolicyRangePartition.End">
            <summary>
            Gets or sets the range end of the refresh policy for this partition
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PolicyRangePartition.Granularity">
            <summary>
            Gets or sets the granularity of the refresh policy for this partition
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.PolicyRangePartition.RefreshBookmark">
            <summary>
            Gets the refresh bookmark of the refresh policy for this partition
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.Serializer.ParseObjectJsonContainer(System.String)">
            <summary>
            An ObjectJsonContainer is a special JSON structure used to serialize several different types of
            TabularObjects at once. The structure simply consists of a JSON object that holds one or more
            arrays of the various types of objects. The key of each array is the lowercase pluralized name
            of the type held by the array.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.SplitModelSerializer.FileWriter.Sanitize(System.String,System.Boolean)">
            <summary>
            Sanitize a string to turn it into a valid file name
            </summary>
            <param name="fileName"></param>
            <param name="isFolder">Set to true when the name represents a folder (which cannot end with a blank char)</param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.SplitModelSerializer.FileWriter.SaveToFolder(TabularEditor.TOMWrapper.Model,System.String,TabularEditor.TOMWrapper.Serialization.SerializeOptions,System.Collections.Generic.Dictionary{System.String,TabularEditor.TOMWrapper.Serialization.DataSourceProperties})">
            <summary>
            Saves the model to the specified folder using the specified serialize options.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.SplitModelSerializer.FileWriter.WriteIfChanged(System.String,System.String)">
            <summary>
            Writes textual data to a file, but only if the file does not already contain the exact same text.
            Automatically creates a directory for the file, if it doesn't already exist.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.SplitModelSerializer.ConvertCulturesJson(System.String)">
            <summary>
            Converts an array of culture names into an equivalent TOM representation of the Culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.SplitModelSerializer.ConvertPerspectivesJson(System.String)">
            <summary>
            Converts a string representing an array of <see cref="T:TabularEditor.TOMWrapper.PerspectiveCollection.SerializedPerspective"/> objects into an equivalent TOM representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.SplitModelSerializer.Sub(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets or creates the specified array
            </summary>
            <param name="baseObject"></param>
            <param name="arrayProperty"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.SplitModelSerializer.Enum(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Enumerates all JObjects of the specified JArray (provided it exists)
            </summary>
            <param name="baseObject"></param>
            <param name="arrayProperty"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.TranslationAnnotationSerializer.SaveTranslations(TabularEditor.TOMWrapper.IInternalTranslatableObject,System.Boolean)">
            <summary>
            Stores all translations on the current instance of an ITranslatableObject as annotations on the object.
            Translations can later be retrieved using the LoadTranslations() extension method.
            </summary>
            <param name="obj">The object on which to save translations</param>
            <param name="includeChildren">Indicates whether translations on child objects are recursively saved</param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Serialization.TranslationAnnotationSerializer.LoadTranslations(TabularEditor.TOMWrapper.IInternalTranslatableObject,System.Boolean)">
            <summary>
            Reads any translations stored in the annotations of the current instance of an ITranslatableObject,
            and applies them to the model culture.
            </summary>
            <param name="obj">The object on which to load translations from annotations</param>
            <param name="includeChildren">Indicates whether translations are recursively loaded for child objects</param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TableExtension.IsNonImported(Microsoft.AnalysisServices.Tabular.Table)">
            <summary>
            Returns true if the table is a calculated table, calculation group table or entity (directquery over AS)
            Returns false if the table is imported using a Query partition source, an M partition source or a RefreshPolicy partition source.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.ForEach``1(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.ITabularNamedObject},System.Action{``0})">
            <summary>
            Provide a lambda statement that is executed once for each object in the collection.
            </summary>
            <example>
            Selected.Measures.ForEach(obj => obj.Name += \" OLD\");
            </example>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="action"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.InPerspective(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Table},System.String,System.Boolean)">
            <summary>
            Adds or removes all tables in the collection to the specified perspective
            </summary>
            <param name="tables"></param>
            <param name="perspective"></param>
            <param name="value"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.InPerspective(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Column},System.String,System.Boolean)">
            <summary>
            Adds or removes all columns in the collection to the specified perspective
            </summary>
            <param name="columns"></param>
            <param name="perspective"></param>
            <param name="value"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.InPerspective(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Hierarchy},System.String,System.Boolean)">
            <summary>
            Adds or removes all hierarchies in the collection to the specified perspective
            </summary>
            <param name="hierarchies"></param>
            <param name="perspective"></param>
            <param name="value"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.InPerspective(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Measure},System.String,System.Boolean)">
            <summary>
            Adds or removes all measures in the collection to the specified perspective
            </summary>
            <param name="measures"></param>
            <param name="perspective"></param>
            <param name="value"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.InPerspective(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Table},TabularEditor.TOMWrapper.Perspective,System.Boolean)">
            <summary>
            Adds or removes all tables in the collection to the specified perspective
            </summary>
            <param name="tables"></param>
            <param name="perspective"></param>
            <param name="value"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.InPerspective(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Column},TabularEditor.TOMWrapper.Perspective,System.Boolean)">
            <summary>
            Adds or removes all columns in the collection to the specified perspective
            </summary>
            <param name="columns"></param>
            <param name="perspective"></param>
            <param name="value"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.InPerspective(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Hierarchy},TabularEditor.TOMWrapper.Perspective,System.Boolean)">
            <summary>
            Adds or removes all hierarchies in the collection to the specified perspective
            </summary>
            <param name="hierarchies"></param>
            <param name="perspective"></param>
            <param name="value"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.InPerspective(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Measure},TabularEditor.TOMWrapper.Perspective,System.Boolean)">
            <summary>
            Adds or removes all measures in the collection to the specified perspective
            </summary>
            <param name="measures"></param>
            <param name="perspective"></param>
            <param name="value"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCollectionHelper.SetDisplayFolder(System.Collections.Generic.IEnumerable{TabularEditor.TOMWrapper.Measure},System.String)">
            <summary>
            Sets the Display Folder property of all measures in the collection at once
            </summary>
            <param name="measures"></param>
            <param name="displayFolder"></param>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TabularCommonActions">
            <summary>
            Provides convenient methods for common actions on a Tabular Model, that often involve changing multiple objects at once.
            For example, these methods may be used to easily perform UI drag and drop operations that will change hierarchy levels,
            display folders, etc.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCommonActions.ImportTranslations(System.String,System.Boolean,System.Boolean)">
            <summary>
            Applys translation from a JSON string.
            </summary>
            <param name="culturesJson"></param>
            <param name="overwriteExisting"></param>
            <param name="ignoreInvalid"></param>
            <returns>False if ignoreInvalid is set to false and an invalid object is encountered</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCommonActions.InsertObjects(TabularEditor.TOMWrapper.Serialization.ObjectJsonContainer,System.Func{System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.DialogResult},TabularEditor.TOMWrapper.ITabularNamedObject,TabularEditor.TOMWrapper.IInsertOptions)">
            <summary>
            Inserts the specified list of objects into the model, at the optional destination. Objects that cannot
            be meaningfully inserted in the destination, will be inserted at the destination parent (recursively).
            If no suitable destination can be found, insertion will be ignored.
            Useful for drag-and-drop or copy-paste operations.
            </summary>
            <param name="objectContainer"></param>
            <param name="destination"></param>
            <param name="insertOptions"></param>
            <param name="questionCallback"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularCultureHelper.ImportCulture(Newtonsoft.Json.Linq.JObject,TabularEditor.TOMWrapper.Model,System.Boolean,System.Boolean)">
            <summary>
            Method returns 'false' if an error was encountered and <paramref name="haltOnError"/> is set to true.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TabularModelHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularModelHandler.#ctor(System.Int32,TabularEditor.TOMWrapper.TabularModelHandlerSettings,System.Boolean)">
            <summary>
            Creates a new blank Tabular Model
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.TabularModelHandler._semanticChanges">
            <summary>
            Indicates whether any structural changes have been made, that may cause DAX expressions against the deployed model
            to return different results or fail, compared to the loaded model.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularModelHandler.#ctor(System.String,System.String,TabularEditor.TOMWrapper.TabularModelHandlerSettings)">
            <summary>
            Connects to an instance of Analysis Services Tabular (SQL Server 2016+, Azure AS or Power BI) and
            loads a tabular model from one of the deployed databases on the instance.
            </summary>
            <param name="serverNameOrConnectionString">Server name or connection string of the Analysis Services instance</param>
            <param name="databaseName">Name or ID of the database to load</param>
            <param name="settings">A <see cref="T:TabularEditor.TOMWrapper.TabularModelHandlerSettings"/> instance to initiate the <see cref="T:TabularEditor.TOMWrapper.TabularModelHandler"/> with</param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularModelHandler.NewServerSession(TabularEditor.TOMWrapper.ImpersonationSettings)">
            <summary>
            To prevent new local sessions from interfering with external change detection, always instantiate a new TOM.Server object by calling this method.
            This way, we add the SessionID of the newly created connection to the LocalSession cache of the current trace, thus allowing us to filter out
            any events on the same SessionID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularModelHandler.BeginUpdate(System.String,TabularEditor.TOMWrapper.Undo.UndoGroup)">
            <summary>
            Begins a batch update
            </summary>
            <param name="undoName"></param>
            <param name="group">See comment on <see cref="T:TabularEditor.TOMWrapper.Undo.UndoGroup"/></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularModelHandler.EndUpdate(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ends the latest batch update (can never be called more times than BeginUpdate).
            </summary>
            <param name="undoable"></param>
            <param name="rollback"></param>
            <param name="applyCascadingChanges"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularModelHandler.EndUpdateAll(System.Boolean)">
            <summary>
            Ends all batch updates in progress.
            </summary>
            <param name="rollback"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularModelHandler.SaveDB(System.Boolean)">
            <summary>
            Saves the changes to the database. It is the users responsibility to check if changes were made
            to the database since it was loaded to the TOMWrapper. You can use Handler.CheckConflicts() for
            this purpose.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularModelHandler.#ctor(System.String,TabularEditor.TOMWrapper.TabularModelHandlerSettings)">
            <summary>
            Loads an Analysis Services tabular database (Compatibility Level 1200 or newer) from a file
            or folder.
            </summary>
            <param name="path">Path to the .bim or database.json file</param>
            <param name="settings">A <see cref="T:TabularEditor.TOMWrapper.TabularModelHandlerSettings"/> instance to initiate the <see cref="T:TabularEditor.TOMWrapper.TabularModelHandler"/> with</param>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularModelHandler.SetSerializationOptionsAsAnnotation">
            <summary>
            For certain unit tests, it is useful to prevent the SerializationOptions annotation from being added to the model. In that case, set this to false.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularModelHandlerExtension.IsConnected(TabularEditor.TOMWrapper.ITabularModelHandler)">
            <summary>
            Indicates if this model handler is connected to an instance of Analysis Services
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SaveFormat.ModelSchemaOnly">
            <summary>
            Saves only the Model Schema as a Model.bim file
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SaveFormat.PowerBiTemplate">
            <summary>
            Saves the Model Schema to an existing .pbit (Power BI Template) file
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SaveFormat.VisualStudioProject">
            <summary>
            Saves the Model Schema together with a Visual Studio Tabular Project file and user settings file
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.SaveFormat.TabularEditorFolder">
            <summary>
            Saves the Model Schema as a Tabular Editor folder structure
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModelSourceType.Database">
            <summary>
            SSAS Tabular database Compatibility Level 1200 or 1400
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModelSourceType.File">
            <summary>
            Model.bim Compatibility Level 1200 or 1400 JSON file
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModelSourceType.Folder">
            <summary>
            Model.bim exploded into a folder structure by Tabular Editor
            </summary>
        </member>
        <member name="F:TabularEditor.TOMWrapper.ModelSourceType.Pbit">
            <summary>
            Power BI Template file (.pbit)
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TabularNamedObject">
            <summary>
            A TabularObject is a wrapper for the Microsoft.AnalysisServices.Tabular.NamedMetadataObject class.
            This wrapper is used for all objects that are to be viewable and editable in the Tabular Editor.
            The same base class is used for all kinds of objects in a Tabular Model. This base class provides
            method for editing the (localized) name and description.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularNamedObject.AllowDelete(System.String@)">
            <summary>
            Derived classes should override this method to prevent an object from being deleted.
            If left un-overridden, always returns TRUE and sets message to null.
            </summary>
            <param name="message">If an object CANNOT be deleted, this string should provide
            a reason why. If an object CAN be deleted, this string may optionally provide a
            suitable warning message that applies if the object is deleted immediately after
            the call to CanDelete.</param>
            <returns>True if an object can be deleted. False otherwise.</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularNamedObject.CanDelete">
            <summary>
            Indicates whether an object can be deleted or not.
            </summary>
            <returns>True if the object can currently be deleted. False, otherwise.</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularNamedObject.CanDelete(System.String@)">
            <summary>
            Indicates whether an object can be deleted or not.
            </summary>
            <param name="message">The reason why an object cannot be deleted, or in case the
            method returns true, a warning message that should be displayed to the user before
            deletion.</param>
            <returns>True if the object can currently be deleted. False, otherwise.</returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularNamedObject.Delete">
            <summary>
            Deletes the object.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularNamedObject.Undelete(TabularEditor.TOMWrapper.ITabularObjectCollection,System.Type,System.String)">
            <summary>
            Derived classes must take care to undelete any objects "owned" by the
            object in question. For example, a Measure must take care of calling
            Undelete on its KPI (if any), a Hierarchy must call Undelete on each
            of its levels, etc.
            </summary>
            <param name="collection"></param>
            <param name="objectType"></param>
            <param name="json"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularNamedObject.RemoveReferences">
            <summary>
            The RemoveReferences method is called before an object is deleted. Derived classes
            should override this to remove all references to this object, from other objects.
            When a parent object is deleted.
            
            Remember to call base.RemoveReferences(), as this will take care of calling the same
            method on any child objects, as well as removing the following references:
             - Removing translations from the object (names, descriptions, display folders)
             - Removing perspective memberships
             - Clearing DAX dependencies / dependants
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularNamedObject.AfterRemoval(TabularEditor.TOMWrapper.ITabularObjectCollection)">
            <summary>
            This method is called after an object has been removed from a collection.
            Derived classes should override this to perform any cleanup necessary after
            removal. For example, when a level is removed from a hierarchy, the hierachy
            must compact the ordinal numbers of the remaining levels.
            
            The base class will automatically call AfterRemoval on all child objects to
            the object that was removed.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularNamedObject.MetadataIndex">
            <summary>
            Returns the index of this item in the parent metadata collection
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularNamedObject.Name">
            <summary>
            The name of this object. Warning: Changing the name can break formula logic, if Automatic Formula Fix-up is disabled.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.ITabularObjectContainer">
            <summary>
            TabularObjects that can contain other objects should use this interface, to allow easy enumerator of child objects.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TabularObject">
            <summary>
            Base class for all TOM objects that are wrapped in the TOMWrapper. Supports INotifyPropertyChanged and INotifyPropertyChanging
            and undo/redo functionality via the TabularModelHandler. Every TabularObject holds a reference to the corresponding TOM MetadataObject.
            A TabularObject cannot exist without a corresponding TOM MetadataObject.
            
            Protected constructor that takes a TOM MetadataObject as argument.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularObject.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Fired after a property is changed
            </summary>
            <param name="propertyName"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularObject.OnPropertyChanging(System.String,System.Object,System.Boolean@,System.Boolean@)">
            <summary>
            Called before a property is changed on an object. Derived classes can control how the change is handled.
            Throw ArgumentException within this method, to display an error message in the UI.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
            <param name="newValue">New value assigned to the property.</param>
            <param name="undoable">Return false if automatic undo of the property change is not needed.</param>
            <param name="cancel">Return true if the property change should not apply.</param>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularObject.Model">
            <summary>
            The model this object belongs to.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularObject.ObjectType">
            <summary>
            The type of this object (Folder, Measure, Table, etc.).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularObject.ObjectTypeName">
            <summary>
            The type name of this object (\"Folder\", \"Measure\", \"Table\", etc.).
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularObject.#ctor(Microsoft.AnalysisServices.Tabular.MetadataObject,TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            Creates a TabularObject representing the provided TOM MetadataObject.
            </summary>
            <param name="metadataObject"></param>
            <param name="handler"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularObject.Init">
            <summary>
            Derived members should override this method to instantiate child objects
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TabularObjectCollection`1">
            <summary>
            Represents a collection of Tabular Object Model objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularObjectCollection`1.Item(System.String)">
            <summary>
            Gets the item with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets the item on the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularObjectCollection`1.Contains(`0)">
            <summary>
            Returns true if this collection contains the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularObjectCollection`1.Contains(System.String)">
            <summary>
            Returns true if this collection contains an item with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularObjectCollection`1.CollectionName">
            <summary>
            The name of this collection.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularObjectCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.TabularObjectCollection`1.Count">
            <summary>
            The number of items in this collection.
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.TabularTree">
            <summary>
            The TabularTree represents the logical structure of objects in the TOM, that we are going to
            display to the user through the TOM Explorer. The tree maintains a cache of the folder structure
            within each table, which may change depending on the selected language (culture).
            Each individual TabularObject does not know or care about its logical relation to other
            objects (for example, through DisplayFolders in a specific culture). TabularObjects only care
            about their physical relations which are inherited from the Tabular Object Model directly (i.e.,
            a measure belongs to a table, etc.).
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularTree.OnNodesChanged(TabularEditor.TOMWrapper.ITabularObject)">
            <summary>
            Call this method to signal to the TreeView that a node needs repaint, typically
            because a property was changed that affects how the node should be rendered (but not
            WHERE the node should be rendered).
            </summary>
            <param name="nodeItem"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.TabularTree.OnNodeNameChanged(TabularEditor.TOMWrapper.IInternalTabularObject)">
            <summary>
            Call this method to signal to the TreeView that a nodes name was changed. When
            using the OrderByName option, this typically requires a call to OnStructureChanged
            on the parent node.
            </summary>
            <param name="nodeItem"></param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Tests.CompatibilityLevelAttribute.#ctor(System.Int32)">
            <summary>
            Set this attribute to specify the minimum compatibilitylevel needed to use the
            decorated member.
            </summary>
            <param name="minimumCompatibilityLevel"></param>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Undo.IUndoAction.Consequent">
            <summary>
            Indicates that this action was the automatic consequence of some other action initiated by the user
            </summary>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Undo.UndoManager">
            <summary>
            UndoManager implements an undo/redo handling system. The system implements two stacks: One for undoable operations (i.e. "going back"),
            and one for redoable operations (i.e. undoable operations that has been undone, "going forward"). The UndoManager supports setting
            checkpoints, rolling all changes back, etc.
            
            To register an undoable operation, call the "Add" method. Use the public methods "Undo()", "Redo()", "Clear()", etc. to control the
            stack of operations. Use "BeginBatch()" and "EndBatch()" to register batch of undoable operations that will be undone/redone together
            in a single batch.
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Undo.UndoManager.Enabled">
            <summary>
            Whether or not the undo manager is collecting operations.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Undo.UndoManager.Rollback(System.Boolean)">
            <summary>
            Rolls back all changes done to the model.
            </summary>
            <param name="toCheckPoint">If this is set to true, the model is only rolled back to the last set checkpoint (typically when the model was last saved).</param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Undo.UndoManager.FlagChange">
            <summary>
            Call this method to indicate that a change was applied, even when it might not be undoable (such as annotation changes).
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Undo.UndoManager.SetCheckpoint">
            <summary>
            Sets the checkpoint. You can use the <see cref="P:TabularEditor.TOMWrapper.Undo.UndoManager.AtCheckpoint"/> property to determine
            if the undo stack is currently at the checkpoint (meaning no changes have been done).
            </summary>
        </member>
        <member name="P:TabularEditor.TOMWrapper.Undo.UndoManager.AtCheckpoint">
            <summary>
            Returns true if no changes have been done relative to the last checkpoint set.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Undo.UndoManager.GetHistory">
            <summary>
            Returns a string containing the entire history of changes applied to the model
            in a human-readable way.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Undo.UndoManager.#ctor(TabularEditor.TOMWrapper.TabularModelHandler)">
            <summary>
            Creates the UndoManager. Remember to set 'Enabled' to true after creation.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="F:TabularEditor.TOMWrapper.Undo.UndoManager.GroupSeparationDelay">
            <summary>
            If two batch actions with the same <see cref="P:TabularEditor.TOMWrapper.Undo.UndoBatchAction.Group"/> are performed sequentially and less
            than the number of milliseconds specified here, they will be grouped together when performing undo/redo.
            </summary>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Undo.UndoManager.BeginBatch(System.String,System.Boolean,TabularEditor.TOMWrapper.Undo.UndoGroup)">
            <summary>
            Begins a batch of undoable operations.
            </summary>
            <param name="batchName">A descriptive name for the batch.</param>
            <param name="internalBatch"></param>
            <param name="group">Sequential batch actions having the same group will be undone/redone together</param>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Undo.UndoManager.EndBatch(System.Boolean)">
            <summary>
            Ends a batch of undoable operations.
            </summary>
            <param name="rollback">Set to true if the batch needs to be undone immediately.</param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.TOMWrapper.Undo.UndoManager.Add(TabularEditor.TOMWrapper.Undo.IUndoAction)">
            <summary>
            Call this method when an action is performed, that should be undoable
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:TabularEditor.TOMWrapper.Undo.UndoGroup">
            <summary>
            Undo groups are used to link undo batches together. When a sequence of undo batches have the same
            UndoGroup, they will all be undone as one. This is useful when the UI creates an undo batch for each
            interaction when these interactions are expected to happen in short succession.
            </summary>
        </member>
        <member name="T:TabularEditor.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.CannotCreatePowerBIObject">
            <summary>
              Looks up a localized string similar to Adding a {0} to a Power BI Data Model is not allowed..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.CannotDeleteCalculatedTableColumn">
            <summary>
              Looks up a localized string similar to Calculated Table Columns cannot be deleted. Hide the column or revisit the Calculated Table expression instead..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.CannotDeleteObject">
            <summary>
              Looks up a localized string similar to This object cannot be deleted..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.CannotDeletePowerBIObject">
            <summary>
              Looks up a localized string similar to Deleting a {0} from a Power BI Data Model is not allowed..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.ColumnUsedInHierarchy">
            <summary>
              Looks up a localized string similar to This column is used in one or more hierarchies. The corresponding levels will also be deleted..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.ColumnUsedInRelationship">
            <summary>
              Looks up a localized string similar to This column is used in one or more relationships. Deleting it will also remove the relationship from the model..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.CompatibilityError_ObjectLevelSecurity">
            <summary>
              Looks up a localized string similar to Object Level Security requires Compatibility Level 1400 or higher..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.CompatibilityError_StructuredDataSource">
            <summary>
              Looks up a localized string similar to Structured Data Sources can only be added to Compatibility Level 1400 or higher models..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.DataSourceInUse">
            <summary>
              Looks up a localized string similar to A data source which is used by one or more partitions cannot be deleted..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.DuplicateColumnName">
            <summary>
              Looks up a localized string similar to A column with the name &quot;{0}&quot; already exists in the table. Choose a different name for this column..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.DuplicateMeasureName">
            <summary>
              Looks up a localized string similar to A measure with the name &quot;{0}&quot; already exists in the model. Choose a different name for this measure..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.InvalidExpressionProperty">
            <summary>
              Looks up a localized string similar to A {0} object does not have a DAX {1} property..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.ObjectAlreadyDeleted">
            <summary>
              Looks up a localized string similar to Can&apos;t remove this object from the TOM since it has already been deleted..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.OperationDelete">
            <summary>
              Looks up a localized string similar to Delete {0}.
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.ParameterBlankNotAllowed">
            <summary>
              Looks up a localized string similar to {0} cannot be blank..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.ReferencedByDAX">
            <summary>
              Looks up a localized string similar to This object is referenced by one or more other objects through DAX expressions. Deleting it will cause dependent objects to stop functioning correctly..
            </summary>
        </member>
        <member name="P:TabularEditor.Messages.TableMustHaveAtLeastOnePartition">
            <summary>
              Looks up a localized string similar to A table must have at least one partition..
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.CultureCollectionEditor">
            <summary>
            This Collection Editor for Cultures takes care of removing unassigned cultures
            when the Collection Editor is closed.
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.TabularObjectCollectionEditor`1">
            <summary>
            A CollectionEditor that automatically refreshes the parent PropertyGrid when the CollectionEditor form is closed.
            This ensures that no expanded items (using the DictionaryProperty) still show old (deleted) members after the
            form is closed.
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.GenericCollectionEditor`1">
            <summary>
            A CollectionEditor that automatically refreshes the parent PropertyGrid when the CollectionEditor form is closed.
            This ensures that no expanded items (using the DictionaryProperty) still show old (deleted) members after the
            form is closed.
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.TableColumnConverter">
            <summary>
            Allows the user to select any column on the same table as the current item, except the selected item(s) itself.
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.AllOtherTablesColumnConverter">
            <summary>
            Allows the user to select any column across all columns in the model, EXCEPT columns
            on the same table as the current item.
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.VirtualObjectConverter">
            <summary>
            The VirtualObjectConverter provides functionality similar to the ExpandableObjectConverter.
            The only difference is, that the expanded properties may be inferred from a different object
            than the object on which the VirtualObjectConverter was assigned.
            
            Derived classes must implement the GetObject() method, to provide the in place object.
            
            For example, a FormatString property (of type string) can use the VirtualObjectConverter to
            show a set of subproperties in the property grid. These subproperties are inferred from a
            complex class that can be converter to and from the FormatString string.
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.ICustomEditor">
            <summary>
            The CustomEditors static class, can be used to register custom editors that should be used when
            a specified property is edited in the PropertyGrid. An editor provided this way, must implement
            the ICustomEditor interface.
            
            An example of a custom editor is the FormDisplayFolderSelect which displays a hierarchical view
            of Display Folders in a table. The editor is used for editing Display Folder strings in the
            property grid.
            
            Properties that should be editable in a Custom Editors, must be decorated with the Editor attribute
            like so:
            
                [Editor(typeof(CustomDialogEditor), typeof(System.Drawing.Design.UITypeEditor))]
                public string FormatString { get; set; }
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.IExpandableIndexer">
            <summary>
            This interface must be implemented by dictionary-type properties on a class, such as
            annotations, translations, etc.
            </summary>
        </member>
        <member name="M:TabularEditor.PropertyGridUI.IExpandableIndexer.GetDisplayName(System.String)">
            <summary>
            Gets the value to display for a given key. Note, this is not the value of the object represented by the key. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.IDropDownProperties">
            <summary>
            This interface must be implemented by objects containing one or more property that
            should show up as a drop-down list in the PropertyGrid. The interface provides a
            means for the DropDown typeconverter to get the list of string items to display in
            the drop down.
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.IDynamicPropertyObject">
            <summary>
            Implement this interface on objects that should be able to show/hide or change readonly
            state of properties at runtime. For example, an object that has a DataType and a FormatString
            property, might not want the FormatString property to show up whenever a certain DataType is
            in use.
            
            Make sure that the implementing class uses the DynamicPropertyConverter as its TypeConverter,
            by decorating the class with:
            
            [TypeConverter(typeof(DynamicPropertyConverter))]
            
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.DynamicPropertyConverter">
            <summary>
            This TypeConverter 
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.PropertyActionAttribute">
            <summary>
            Use this attribute on properties that needs to have invokable actions in the Property Grid
            </summary>
        </member>
        <member name="T:TabularEditor.PropertyGridUI.ResetPropertyActionAttribute">
            <summary>
            Use this to indicate that a method call corresponds to resetting the property. This will set the <see cref="P:TabularEditor.PropertyGridUI.PropertyAction.IsResetAction"/> to true,
            indicating to clients that it is not necessary to show an explicit "Reset" menu option, when the action is available.
            </summary>
        </member>
        <member name="T:TabularEditor.DesignerHost">
            <summary>
            The DesignerHost is a custom implementation of IDesignerHost and ISite, which is needed to hookup
            any PropertyGrid components used in the UI to enable proper Undo/Redo functionality. Otherwise,
            when changing the properties of multiple objects at once, the operation is not batched, meaning
            that the UI will be updated when a property value is set for every object in the selection. This
            will cause slow updates when many objects are selected, and furthermore, undoing the entire operation
            is a hassle, as one Undo-action is needed per object.
            
            To set up a PropertyGrid to use this host, use the following code:
            
                MyPropertyGrid.Site = new DesignerHost();
            </summary>
        </member>
        <member name="T:TabularEditor.StringHelper">
            <summary>
            Various string extension methods
            </summary>
        </member>
        <member name="M:TabularEditor.StringHelper.FirstNLines(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the first N lines of a string, optionally adding an ellipsis if there are more lines.
            </summary>
            <param name="value"></param>
            <param name="n"></param>
            <param name="addEllipsis"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.Left(System.String,System.Int32,System.Boolean)">
            <summary>
            Shortens a string from the left to the specified number of characters, optionally adding an ellipsis if the string contains more characters than that
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
            <param name="addEllipsis"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.SplitCamelCase(System.String)">
            <summary>
            Splits a string typed as CamelCase (aka. PascalCase) into separate words.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.Right(System.String,System.Int32)">
            <summary>
            Shortens a string from the right to the specified number of characters
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.IsNumeric(System.String,System.Boolean)">
            <summary>
            Determines if a string represents a numeric value
            </summary>
            <param name="value"></param>
            <param name="allowDecimals"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.
            </summary>
            <param name="str">Current instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace all occurrences of oldValue</param>
            <param name="comparison">One of the enumeration values that specifies the rules for the search</param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.EqualsI(System.String,System.String)">
            <summary>
            Invariant Culture Ignore Case comparison between two strings.
            </summary>
            <param name="str"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.EqualsTI(System.String,System.String)">
            <summary>
            Invariant Culture Ignore Case and trailing/leading whitespace comparison of two strings.
            </summary>
            <param name="current"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.FormatInvariant(System.String,System.Object[])">
            <summary>
            Similar to string.Format but using invariant culture
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.Replace(System.String,System.Char[],System.Char)">
            <summary>
            Replace any occurrence of characters with a specific chracter
            </summary>
            <param name="value"></param>
            <param name="find"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="M:TabularEditor.StringHelper.Replace(System.String,System.Char[],System.Char[])">
            <summary>
            Replaces any occurrence of various chracters with a different character
            </summary>
            <param name="value"></param>
            <param name="find"></param>
            <param name="replace"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TabularEditor.StringHelper.Replace(System.String,System.Char[],System.String[])">
            <summary>
            Replaces any occurrence of various chracters with a different string
            </summary>
            <param name="value"></param>
            <param name="find"></param>
            <param name="replace"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:TabularEditor.XmlaResultExtension">
            <summary>
            Extension methods for <see cref="T:Microsoft.AnalysisServices.XmlaResultCollection"/>
            </summary>
        </member>
        <member name="M:TabularEditor.XmlaResultExtension.GetMessages(Microsoft.AnalysisServices.XmlaResultCollection)">
            <summary>
            Combines all XMLA result messages into a string.
            </summary>
            <param name="xmlaResults"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AnalysisServices.Tabular.Helper.MetadataObjectHelper">
            <summary>
            Provides various extension methods to make it easier to work with the Tabular Object Model
            </summary>
        </member>
        <member name="M:Microsoft.AnalysisServices.Tabular.Helper.MetadataObjectHelper.ValidateName(Microsoft.AnalysisServices.Tabular.NamedMetadataObject,System.String)">
            <summary>
            Throws an exception of the provided new name is invalid for the specified object.
            </summary>
        </member>
    </members>
</doc>
