<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".md" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    // ********************************
    // C# Text Templating for .md files
    // ********************************
    // There are probably better ways to generate md docs from the .dll comments using the DocFx
    // infrastructure, but T4 works just fine. Just remember to configure your tasks.vs.json file,
    // so you can invoke the text transformer through the Solution Explorer in Visual Studio:
    //
    //   1. Right-click on the .tt file in the solution explorer, then choose "Configure tasks"
    //   2. Replace the generated task in the JSON file with the following:
    //
    //      {
    //        "taskName": "template file generator",
    //        "appliesTo": "*.tt",
    //        "type": "default",
    //        "command": "${env.COMSPEC}",
    //        "args": [
    //          "c:\\\"Program Files\"\\\"Microsoft Visual Studio\"\\2022\\Enterprise\\Common7\\IDE\\TextTransform.exe \"${file}\""
    //        ]
    //      }
    //
    //   3. Update the path in the args array, to point to your installation of Visual Studio and the true location
    //      of the TextTransform.exe file.
    //   4. Save the tasks.vs.json file. You should now see an option to "Run template file generator" when right-
    //      clicking on a .tt file in the Solution Explorer.
    //
    // *********************************
#>
---
uid: script-helper-methods
title: C# Script Helper Methods
updated: <#=DateTime.Today.ToString("yyyy-MM-dd")#>
applies_to:
  versions:
    - version: 2.x
    - version: 3.x
---
<!--- THIS FILE WAS GENERATED BY A .TT FILE - DO NOT MODIFY MANUALLY -->
# C# Script Helper Methods

When writing C# scripts in Tabular Editor, a number of global methods (i.e. methods that can be called without prefixing a class or object name) are available.

The full list of these can be found in the [API documentation](xref:TabularEditor.Shared.Scripting.ScriptHost#methods).

Below is a summary of these methods. Click on a method name to browse the API documentation for that method.

| <div style="width:210px">Method</div> | Purpose |
| --- | --- |
<#
    // Methods in the XML file are specified as "M:TabularEditor.Shared.Scripting.ScriptHost.ConvertDax(System.String,System.Boolean)"
    // From this string, we can determine the member name and its parameter, and also figure out which DocFx URL this corresponds to.
    (string Name, string Url) ParseMemberName(string methodName)
    {
        var parenIx = methodName.IndexOf("(");
        var typeParamIx = methodName.IndexOf("`");
        if( typeParamIx > 0) parenIx = typeParamIx;

        var methodNameEndIx = parenIx < 0 ? methodName.Length : parenIx;

        var dotIx = methodName.LastIndexOf(".", methodNameEndIx);
        var name = methodName.Substring(dotIx + 1, methodNameEndIx - dotIx - 1);

        var className = methodName.Substring(2, dotIx - 2);
        var urlBase = "xref:" + className;

        if(methodName.StartsWith("T:")) return (name, urlBase + "." + name);

        var urlAnchor = methodName.Substring(2).Replace(".", "_").Replace("{","_").Replace("}","_").Replace("`","_").Replace(",","_").Replace("(","_").Replace(")","_");
        //var urlAnchor = className.Replace(".", "_");
        //var paramList = methodName.EndsWith(")") ? methodName.Substring(methodNameEndIx + 1, methodName.Length - methodNameEndIx - 2).Split(',') : Array.Empty<string>();
        //if (paramList.Length > 0)
        //{
        //    urlAnchor += "_" + string.Join("", paramList.Select(p => p.Replace(".", "_").Replace("{","_").Replace("}","_").Replace("`","_") + "_"));
        //}*/

        return (name, urlBase + "#" + urlAnchor);
    }

    string CleanNode(XNode node)
    {
        var value = node.ToString().Trim();
        // Fix XML links:
        if(node is XElement element && element.Name == "see" && element.Attribute("cref") is XAttribute cref)
        {
            var parsed = ParseMemberName(cref.Value);
            return $"[`{parsed.Name}`]({parsed.Url})";
        }
        return value;
    }

    string CleanSummary(XElement summaryXml)
    {
        var summary = string.Join(" ", summaryXml.Nodes().Select(CleanNode));
        return string.Join("<br>", summary.Split('\n').Select(s => s.Trim()));
    }

    var xml = XElement.Load("bin\\release\\TabularEditor3.Shared.xml");
    var methodGroupings = xml.Element("members").Elements("member")
        .Select(e => (Name: ((string)e.Attribute("name")), Summary: CleanSummary(e.Element("summary"))))
        .Where(m => m.Name.StartsWith("M:TabularEditor.Shared.Scripting.ScriptHost") || m.Name.StartsWith("P:TabularEditor.Shared.Scripting.ScriptHost"))
        .Select(m => { var parsed = ParseMemberName(m.Name); return (parsed.Name, parsed.Url, m.Summary); })
        .OrderBy(m => m.Name)
        .GroupBy(m => m.Name);
    foreach(var methodGroup in methodGroupings)
    {
        if(methodGroup.Count() == 1) {
#>
| [`<#=methodGroup.First().Name#>`](<#=methodGroup.First().Url#>) | <#=methodGroup.First().Summary#> |
<#
        }
        else {
#>
| [`<#=methodGroup.First().Name#>`](<#=methodGroup.First().Url#>) (+<#=methodGroup.Count()-1#>) | <#=methodGroup.First().Summary#> |
<#

        }
    }
#>